ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	prvTaskIsTaskSuspended:
  25              	.LFB14:
  26              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 2


  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "StackMacros.h"
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 3


  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** settings allow a task to be created using either statically or dynamically
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** made to free the RAM that was allocated statically.
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB. */
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE ( ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && (
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 4


 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 5


 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 6


 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 7


 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments above the definition of
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static variables must be declared volatile. */
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 8


 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint +e956 */
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 9


 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void );
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 10


 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 11


 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for st
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 12


 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( portUSING_MPU_WRAPPERS == 1 )
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				this task had a statically allocated stack in case it is
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				later deleted.  The TCB was allocated dynamically. */
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 13


 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const uint16_t usStackDepth,
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for str
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 14


 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 15


 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed fo
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INC
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 16


 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			break;
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 17


 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the	top of stack variable is updated. */
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 18


 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 19


1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 20


1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 21


1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 22


1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 23


1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxStateList;
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 24


1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eSuspended;
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 25


1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 26


1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 27


1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 28


1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change it's priority variable. However, if
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					can do this even if the scheduler is suspended. */
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 29


1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 30


1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
  27              		.loc 1 1657 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
  33              		.loc 1 1665 0
  34 0000 0246     		mov	r2, r0
  35 0002 70B1     		cbz	r0, .L12
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  36              		.loc 1 1668 0
  37 0004 4169     		ldr	r1, [r0, #20]
  38 0006 0F4B     		ldr	r3, .L15
  39 0008 9942     		cmp	r1, r3
  40 000a 13D0     		beq	.L13
  41 000c 0023     		movs	r3, #0
  42              	.L4:
  43              		.loc 1 1668 0 is_stmt 0 discriminator 4
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 31


  44 000e ABB1     		cbz	r3, .L8
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  45              		.loc 1 1671 0 is_stmt 1
  46 0010 926A     		ldr	r2, [r2, #40]
  47 0012 0D49     		ldr	r1, .L15+4
  48 0014 8A42     		cmp	r2, r1
  49 0016 13D0     		beq	.L9
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
  50              		.loc 1 1675 0
  51 0018 02B1     		cbz	r2, .L6
  52 001a 0023     		movs	r3, #0
  53              	.L6:
  54              		.loc 1 1675 0 is_stmt 0 discriminator 4
  55 001c 63B1     		cbz	r3, .L14
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
  56              		.loc 1 1677 0 is_stmt 1
  57 001e 0120     		movs	r0, #1
  58              	.LVL1:
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  59              		.loc 1 1695 0
  60 0020 7047     		bx	lr
  61              	.LVL2:
  62              	.L12:
  63              	.LBB90:
  64              	.LBB91:
  65              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 32


   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 33


  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 34


 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 35


 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 36


 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
  66              		.loc 2 237 0
  67              		.syntax unified
  68              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  69 0022 4FF05003 			mov r3, #80												
  70 0026 83F31188 		msr basepri, r3											
  71 002a BFF36F8F 		isb														
  72 002e BFF34F8F 		dsb														
  73              	
  74              	@ 0 "" 2
  75              	.LVL3:
  76              		.thumb
  77              		.syntax unified
  78              	.L3:
  79 0032 FEE7     		b	.L3
  80              	.L13:
  81              	.LBE91:
  82              	.LBE90:
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
  83              		.loc 1 1668 0
  84 0034 0123     		movs	r3, #1
  85 0036 EAE7     		b	.L4
  86              	.L14:
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  87              		.loc 1 1658 0
  88 0038 0020     		movs	r0, #0
  89              	.LVL4:
  90 003a 7047     		bx	lr
  91              	.LVL5:
  92              	.L8:
  93 003c 0020     		movs	r0, #0
  94              	.LVL6:
  95 003e 7047     		bx	lr
  96              	.LVL7:
  97              	.L9:
  98 0040 0020     		movs	r0, #0
  99              	.LVL8:
 100 0042 7047     		bx	lr
 101              	.L16:
 102              		.align	2
 103              	.L15:
 104 0044 00000000 		.word	.LANCHOR0
 105 0048 00000000 		.word	.LANCHOR1
 106              		.cfi_endproc
 107              	.LFE14:
 109              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 110              		.align	1
 111              		.syntax unified
 112              		.thumb
 113              		.thumb_func
 114              		.fpu fpv4-sp-d16
 116              	prvResetNextTaskUnblockTime:
 117              	.LFB38:
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 37


1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					lists even if the scheduler is suspended. */
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 38


1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 39


1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												"IDLE",
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL,
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 40


1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base. */
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 41


1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 42


1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 43


2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 44


2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 45


2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 46


2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == 0x00 )
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 47


2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 48


2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 49


2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 50


2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTaskResumeAll();
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 51


2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + 1;
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U )
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 52


2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 53


2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 54


2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 55


2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 56


2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				protection here so count values are only valid until the timer
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				are provided by the application, not the kernel. */
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 57


2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 58


2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 59


2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a higher priority than the calling task.  This allows
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task to know if it should force a context
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch now. */
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 60


3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 61


3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 62


3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 63


3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 64


3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 65


3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 66


3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xListIsEmpty;
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		too often in the idle task. */
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xTaskResumeAll();
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				TCB_t *pxTCB;
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 67


3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the suspended list then there is a chance it is
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			actually just blocked indefinitely - so really it should be reported as
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being in the Blocked state. */
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTaskStatus->eCurrentState == eSuspended )
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTaskStatus->eCurrentState = eBlocked;
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xTaskResumeAll();
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* INCLUDE_vTaskSuspend */
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the value
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		of eState passed into this function is eInvalid - otherwise the state is
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		just set to whatever is passed in. */
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 68


3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eState;
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 69


3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( uint16_t ) ulCount;
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 70


3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 118              		.loc 1 3636 0
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 71


 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 0
 121              		@ frame_needed = 0, uses_anonymous_args = 0
 122              		@ link register save eliminated.
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 123              		.loc 1 3639 0
 124 0000 0A4B     		ldr	r3, .L23
 125 0002 1B68     		ldr	r3, [r3]
 126 0004 1B68     		ldr	r3, [r3]
 127 0006 4BB9     		cbnz	r3, .L21
 128 0008 0123     		movs	r3, #1
 129              	.L18:
 130              		.loc 1 3639 0 is_stmt 0 discriminator 4
 131 000a 4BB9     		cbnz	r3, .L22
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 132              		.loc 1 3653 0 is_stmt 1
 133 000c 074B     		ldr	r3, .L23
 134 000e 1B68     		ldr	r3, [r3]
 135 0010 DB68     		ldr	r3, [r3, #12]
 136 0012 DB68     		ldr	r3, [r3, #12]
 137              	.LVL9:
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 138              		.loc 1 3654 0
 139 0014 5A68     		ldr	r2, [r3, #4]
 140 0016 064B     		ldr	r3, .L23+4
 141              	.LVL10:
 142 0018 1A60     		str	r2, [r3]
 143 001a 7047     		bx	lr
 144              	.L21:
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 145              		.loc 1 3639 0
 146 001c 0023     		movs	r3, #0
 147 001e F4E7     		b	.L18
 148              	.L22:
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 149              		.loc 1 3645 0
 150 0020 4FF0FF32 		mov	r2, #-1
 151 0024 024B     		ldr	r3, .L23+4
 152 0026 1A60     		str	r2, [r3]
 153 0028 7047     		bx	lr
 154              	.L24:
 155 002a 00BF     		.align	2
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 72


 156              	.L23:
 157 002c 00000000 		.word	.LANCHOR2
 158 0030 00000000 		.word	.LANCHOR3
 159              		.cfi_endproc
 160              	.LFE38:
 162              		.section	.text.prvDeleteTCB,"ax",%progbits
 163              		.align	1
 164              		.syntax unified
 165              		.thumb
 166              		.thumb_func
 167              		.fpu fpv4-sp-d16
 169              	prvDeleteTCB:
 170              	.LFB37:
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 171              		.loc 1 3582 0
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 0
 174              		@ frame_needed = 0, uses_anonymous_args = 0
 175              	.LVL11:
 176 0000 10B5     		push	{r4, lr}
 177              	.LCFI0:
 178              		.cfi_def_cfa_offset 8
 179              		.cfi_offset 4, -8
 180              		.cfi_offset 14, -4
 181 0002 0446     		mov	r4, r0
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
 182              		.loc 1 3600 0
 183 0004 006B     		ldr	r0, [r0, #48]
 184              	.LVL12:
 185 0006 FFF7FEFF 		bl	vPortFree
 186              	.LVL13:
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 187              		.loc 1 3601 0
 188 000a 2046     		mov	r0, r4
 189 000c FFF7FEFF 		bl	vPortFree
 190              	.LVL14:
 191 0010 10BD     		pop	{r4, pc}
 192              		.cfi_endproc
 193              	.LFE37:
 195              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 196              		.align	1
 197              		.syntax unified
 198              		.thumb
 199              		.thumb_func
 200              		.fpu fpv4-sp-d16
 202              	prvInitialiseNewTask:
 203              	.LFB6:
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 204              		.loc 1 775 0
 205              		.cfi_startproc
 206              		@ args = 16, pretend = 0, frame = 0
 207              		@ frame_needed = 0, uses_anonymous_args = 0
 208              	.LVL15:
 209 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 210              	.LCFI1:
 211              		.cfi_def_cfa_offset 32
 212              		.cfi_offset 4, -32
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 73


 213              		.cfi_offset 5, -28
 214              		.cfi_offset 6, -24
 215              		.cfi_offset 7, -20
 216              		.cfi_offset 8, -16
 217              		.cfi_offset 9, -12
 218              		.cfi_offset 10, -8
 219              		.cfi_offset 14, -4
 220 0004 8046     		mov	r8, r0
 221 0006 9946     		mov	r9, r3
 222 0008 089D     		ldr	r5, [sp, #32]
 223 000a 099F     		ldr	r7, [sp, #36]
 224 000c 0A9C     		ldr	r4, [sp, #40]
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 225              		.loc 1 807 0
 226 000e 266B     		ldr	r6, [r4, #48]
 227 0010 02F18042 		add	r2, r2, #1073741824
 228              	.LVL16:
 229 0014 013A     		subs	r2, r2, #1
 230              	.LVL17:
 231 0016 06EB8206 		add	r6, r6, r2, lsl #2
 232              	.LVL18:
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233              		.loc 1 808 0
 234 001a 26F00706 		bic	r6, r6, #7
 235              	.LVL19:
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 236              		.loc 1 827 0
 237 001e 0023     		movs	r3, #0
 238              	.LVL20:
 239              	.L28:
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 240              		.loc 1 827 0 is_stmt 0 discriminator 1
 241 0020 0F2B     		cmp	r3, #15
 242 0022 07D8     		bhi	.L29
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 243              		.loc 1 829 0 is_stmt 1
 244 0024 C85C     		ldrb	r0, [r1, r3]	@ zero_extendqisi2
 245 0026 E218     		adds	r2, r4, r3
 246 0028 82F83400 		strb	r0, [r2, #52]
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 247              		.loc 1 834 0
 248 002c CA5C     		ldrb	r2, [r1, r3]	@ zero_extendqisi2
 249 002e 0AB1     		cbz	r2, .L29
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 250              		.loc 1 827 0 discriminator 2
 251 0030 0133     		adds	r3, r3, #1
 252              	.LVL21:
 253 0032 F5E7     		b	.L28
 254              	.L29:
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 255              		.loc 1 846 0
 256 0034 0023     		movs	r3, #0
 257              	.LVL22:
 258 0036 84F84330 		strb	r3, [r4, #67]
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 259              		.loc 1 850 0
 260 003a 062D     		cmp	r5, #6
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 74


 261 003c 00D9     		bls	.L31
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 262              		.loc 1 852 0
 263 003e 0625     		movs	r5, #6
 264              	.L31:
 265              	.LVL23:
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 266              		.loc 1 859 0
 267 0040 E562     		str	r5, [r4, #44]
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 268              		.loc 1 862 0
 269 0042 6564     		str	r5, [r4, #68]
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 270              		.loc 1 863 0
 271 0044 4FF0000A 		mov	r10, #0
 272 0048 C4F848A0 		str	r10, [r4, #72]
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 273              		.loc 1 867 0
 274 004c 201D     		adds	r0, r4, #4
 275 004e FFF7FEFF 		bl	vListInitialiseItem
 276              	.LVL24:
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 277              		.loc 1 868 0
 278 0052 04F11800 		add	r0, r4, #24
 279 0056 FFF7FEFF 		bl	vListInitialiseItem
 280              	.LVL25:
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 281              		.loc 1 872 0
 282 005a 2461     		str	r4, [r4, #16]
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 283              		.loc 1 875 0
 284 005c C5F10705 		rsb	r5, r5, #7
 285              	.LVL26:
 286 0060 A561     		str	r5, [r4, #24]
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 287              		.loc 1 876 0
 288 0062 6462     		str	r4, [r4, #36]
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 289              		.loc 1 918 0
 290 0064 C4F84CA0 		str	r10, [r4, #76]
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 291              		.loc 1 919 0
 292 0068 84F850A0 		strb	r10, [r4, #80]
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 293              		.loc 1 946 0
 294 006c 4A46     		mov	r2, r9
 295 006e 4146     		mov	r1, r8
 296 0070 3046     		mov	r0, r6
 297 0072 FFF7FEFF 		bl	pxPortInitialiseStack
 298              	.LVL27:
 299 0076 2060     		str	r0, [r4]
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 300              		.loc 1 950 0
 301 0078 07B1     		cbz	r7, .L27
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 302              		.loc 1 954 0
 303 007a 3C60     		str	r4, [r7]
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 75


 304              	.L27:
 305 007c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 306              		.cfi_endproc
 307              	.LFE6:
 309              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 310              		.align	1
 311              		.syntax unified
 312              		.thumb
 313              		.thumb_func
 314              		.fpu fpv4-sp-d16
 316              	prvInitialiseTaskLists:
 317              	.LFB35:
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
 318              		.loc 1 3334 0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 0
 321              		@ frame_needed = 0, uses_anonymous_args = 0
 322 0000 38B5     		push	{r3, r4, r5, lr}
 323              	.LCFI2:
 324              		.cfi_def_cfa_offset 16
 325              		.cfi_offset 3, -16
 326              		.cfi_offset 4, -12
 327              		.cfi_offset 5, -8
 328              		.cfi_offset 14, -4
 329              	.LVL28:
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 330              		.loc 1 3337 0
 331 0002 0024     		movs	r4, #0
 332 0004 07E0     		b	.L36
 333              	.LVL29:
 334              	.L37:
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 335              		.loc 1 3339 0 discriminator 3
 336 0006 04EB8402 		add	r2, r4, r4, lsl #2
 337 000a 9300     		lsls	r3, r2, #2
 338 000c 0E48     		ldr	r0, .L39
 339 000e 1844     		add	r0, r0, r3
 340 0010 FFF7FEFF 		bl	vListInitialise
 341              	.LVL30:
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 342              		.loc 1 3337 0 discriminator 3
 343 0014 0134     		adds	r4, r4, #1
 344              	.LVL31:
 345              	.L36:
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 346              		.loc 1 3337 0 is_stmt 0 discriminator 1
 347 0016 062C     		cmp	r4, #6
 348 0018 F5D9     		bls	.L37
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 349              		.loc 1 3342 0 is_stmt 1
 350 001a 0C4D     		ldr	r5, .L39+4
 351 001c 2846     		mov	r0, r5
 352 001e FFF7FEFF 		bl	vListInitialise
 353              	.LVL32:
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 354              		.loc 1 3343 0
 355 0022 0B4C     		ldr	r4, .L39+8
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 76


 356              	.LVL33:
 357 0024 2046     		mov	r0, r4
 358 0026 FFF7FEFF 		bl	vListInitialise
 359              	.LVL34:
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 360              		.loc 1 3344 0
 361 002a 0A48     		ldr	r0, .L39+12
 362 002c FFF7FEFF 		bl	vListInitialise
 363              	.LVL35:
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 364              		.loc 1 3348 0
 365 0030 0948     		ldr	r0, .L39+16
 366 0032 FFF7FEFF 		bl	vListInitialise
 367              	.LVL36:
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 368              		.loc 1 3354 0
 369 0036 0948     		ldr	r0, .L39+20
 370 0038 FFF7FEFF 		bl	vListInitialise
 371              	.LVL37:
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 372              		.loc 1 3360 0
 373 003c 084B     		ldr	r3, .L39+24
 374 003e 1D60     		str	r5, [r3]
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 375              		.loc 1 3361 0
 376 0040 084B     		ldr	r3, .L39+28
 377 0042 1C60     		str	r4, [r3]
 378 0044 38BD     		pop	{r3, r4, r5, pc}
 379              	.L40:
 380 0046 00BF     		.align	2
 381              	.L39:
 382 0048 00000000 		.word	.LANCHOR4
 383 004c 00000000 		.word	.LANCHOR5
 384 0050 00000000 		.word	.LANCHOR6
 385 0054 00000000 		.word	.LANCHOR1
 386 0058 00000000 		.word	.LANCHOR7
 387 005c 00000000 		.word	.LANCHOR0
 388 0060 00000000 		.word	.LANCHOR2
 389 0064 00000000 		.word	.LANCHOR8
 390              		.cfi_endproc
 391              	.LFE35:
 393              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 394              		.align	1
 395              		.syntax unified
 396              		.thumb
 397              		.thumb_func
 398              		.fpu fpv4-sp-d16
 400              	prvAddNewTaskToReadyList:
 401              	.LFB7:
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 402              		.loc 1 964 0
 403              		.cfi_startproc
 404              		@ args = 0, pretend = 0, frame = 0
 405              		@ frame_needed = 0, uses_anonymous_args = 0
 406              	.LVL38:
 407 0000 10B5     		push	{r4, lr}
 408              	.LCFI3:
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 77


 409              		.cfi_def_cfa_offset 8
 410              		.cfi_offset 4, -8
 411              		.cfi_offset 14, -4
 412 0002 0446     		mov	r4, r0
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 413              		.loc 1 967 0
 414 0004 FFF7FEFF 		bl	vPortEnterCritical
 415              	.LVL39:
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 416              		.loc 1 969 0
 417 0008 204A     		ldr	r2, .L47
 418 000a 1368     		ldr	r3, [r2]
 419 000c 0133     		adds	r3, r3, #1
 420 000e 1360     		str	r3, [r2]
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 421              		.loc 1 970 0
 422 0010 1F4B     		ldr	r3, .L47+4
 423 0012 1B68     		ldr	r3, [r3]
 424 0014 002B     		cmp	r3, #0
 425 0016 31D0     		beq	.L46
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 426              		.loc 1 993 0
 427 0018 1E4B     		ldr	r3, .L47+8
 428 001a 1B68     		ldr	r3, [r3]
 429 001c 3BB9     		cbnz	r3, .L43
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 430              		.loc 1 995 0
 431 001e 1C4B     		ldr	r3, .L47+4
 432 0020 1B68     		ldr	r3, [r3]
 433 0022 DA6A     		ldr	r2, [r3, #44]
 434 0024 E36A     		ldr	r3, [r4, #44]
 435 0026 9A42     		cmp	r2, r3
 436 0028 01D8     		bhi	.L43
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 437              		.loc 1 997 0
 438 002a 194B     		ldr	r3, .L47+4
 439 002c 1C60     		str	r4, [r3]
 440              	.L43:
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 441              		.loc 1 1010 0
 442 002e 1A4A     		ldr	r2, .L47+12
 443 0030 1368     		ldr	r3, [r2]
 444 0032 0133     		adds	r3, r3, #1
 445 0034 1360     		str	r3, [r2]
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 446              		.loc 1 1020 0
 447 0036 E36A     		ldr	r3, [r4, #44]
 448 0038 0122     		movs	r2, #1
 449 003a 9A40     		lsls	r2, r2, r3
 450 003c 1749     		ldr	r1, .L47+16
 451 003e 0868     		ldr	r0, [r1]
 452 0040 0243     		orrs	r2, r2, r0
 453 0042 0A60     		str	r2, [r1]
 454 0044 03EB8303 		add	r3, r3, r3, lsl #2
 455 0048 9A00     		lsls	r2, r3, #2
 456 004a 211D     		adds	r1, r4, #4
 457 004c 1448     		ldr	r0, .L47+20
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 78


 458 004e 1044     		add	r0, r0, r2
 459 0050 FFF7FEFF 		bl	vListInsertEnd
 460              	.LVL40:
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 461              		.loc 1 1024 0
 462 0054 FFF7FEFF 		bl	vPortExitCritical
 463              	.LVL41:
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 464              		.loc 1 1026 0
 465 0058 0E4B     		ldr	r3, .L47+8
 466 005a 1B68     		ldr	r3, [r3]
 467 005c 6BB1     		cbz	r3, .L41
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 468              		.loc 1 1030 0
 469 005e 0C4B     		ldr	r3, .L47+4
 470 0060 1B68     		ldr	r3, [r3]
 471 0062 DA6A     		ldr	r2, [r3, #44]
 472 0064 E36A     		ldr	r3, [r4, #44]
 473 0066 9A42     		cmp	r2, r3
 474 0068 07D2     		bcs	.L41
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 475              		.loc 1 1032 0
 476 006a 4FF08052 		mov	r2, #268435456
 477 006e 0D4B     		ldr	r3, .L47+24
 478 0070 1A60     		str	r2, [r3]
 479              		.syntax unified
 480              	@ 1032 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 481 0072 BFF34F8F 		dsb
 482              	@ 0 "" 2
 483              	@ 1032 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 484 0076 BFF36F8F 		isb
 485              	@ 0 "" 2
 486              		.thumb
 487              		.syntax unified
 488              	.L41:
 489 007a 10BD     		pop	{r4, pc}
 490              	.LVL42:
 491              	.L46:
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 492              		.loc 1 974 0
 493 007c 044B     		ldr	r3, .L47+4
 494 007e 1C60     		str	r4, [r3]
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 495              		.loc 1 976 0
 496 0080 1368     		ldr	r3, [r2]
 497 0082 012B     		cmp	r3, #1
 498 0084 D3D1     		bne	.L43
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 499              		.loc 1 981 0
 500 0086 FFF7FEFF 		bl	prvInitialiseTaskLists
 501              	.LVL43:
 502 008a D0E7     		b	.L43
 503              	.L48:
 504              		.align	2
 505              	.L47:
 506 008c 00000000 		.word	.LANCHOR9
 507 0090 00000000 		.word	.LANCHOR10
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 79


 508 0094 00000000 		.word	.LANCHOR11
 509 0098 00000000 		.word	.LANCHOR12
 510 009c 00000000 		.word	.LANCHOR13
 511 00a0 00000000 		.word	.LANCHOR4
 512 00a4 04ED00E0 		.word	-536810236
 513              		.cfi_endproc
 514              	.LFE7:
 516              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 517              		.align	1
 518              		.syntax unified
 519              		.thumb
 520              		.thumb_func
 521              		.fpu fpv4-sp-d16
 523              	prvAddCurrentTaskToDelayedList:
 524              	.LFB51:
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 80


3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL. */
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	being used for anything else. */
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListI
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 81


3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding	task then it must be the running state task.  Remove
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the	holding task from the ready	list. */
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 82


3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 83


3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 84


3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 85


3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = 0x00;
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 86


4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0 )
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 87


4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 88


4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 89


4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 90


4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 91


4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 92


4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 93


4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 94


4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 95


4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 96


4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 97


4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 525              		.loc 1 4693 0
 526              		.cfi_startproc
 527              		@ args = 0, pretend = 0, frame = 0
 528              		@ frame_needed = 0, uses_anonymous_args = 0
 529              	.LVL44:
 530 0000 70B5     		push	{r4, r5, r6, lr}
 531              	.LCFI4:
 532              		.cfi_def_cfa_offset 16
 533              		.cfi_offset 4, -16
 534              		.cfi_offset 5, -12
 535              		.cfi_offset 6, -8
 536              		.cfi_offset 14, -4
 537 0002 0446     		mov	r4, r0
 538 0004 0E46     		mov	r6, r1
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 539              		.loc 1 4695 0
 540 0006 1D4B     		ldr	r3, .L57
 541 0008 1D68     		ldr	r5, [r3]
 542              	.LVL45:
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 98


4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 543              		.loc 1 4708 0
 544 000a 1D4B     		ldr	r3, .L57+4
 545 000c 1868     		ldr	r0, [r3]
 546              	.LVL46:
 547 000e 0430     		adds	r0, r0, #4
 548 0010 FFF7FEFF 		bl	uxListRemove
 549              	.LVL47:
 550 0014 50B9     		cbnz	r0, .L50
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 551              		.loc 1 4712 0
 552 0016 1A4B     		ldr	r3, .L57+4
 553 0018 1B68     		ldr	r3, [r3]
 554 001a DA6A     		ldr	r2, [r3, #44]
 555 001c 0123     		movs	r3, #1
 556 001e 03FA02F2 		lsl	r2, r3, r2
 557 0022 1849     		ldr	r1, .L57+8
 558 0024 0B68     		ldr	r3, [r1]
 559 0026 23EA0203 		bic	r3, r3, r2
 560 002a 0B60     		str	r3, [r1]
 561              	.L50:
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 562              		.loc 1 4721 0
 563 002c B4F1FF3F 		cmp	r4, #-1
 564 0030 13D0     		beq	.L55
 565              	.L51:
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 566              		.loc 1 4733 0
 567 0032 2C44     		add	r4, r4, r5
 568              	.LVL48:
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 99


4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 569              		.loc 1 4736 0
 570 0034 124B     		ldr	r3, .L57+4
 571 0036 1B68     		ldr	r3, [r3]
 572 0038 5C60     		str	r4, [r3, #4]
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 573              		.loc 1 4738 0
 574 003a A542     		cmp	r5, r4
 575 003c 16D8     		bhi	.L56
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 576              		.loc 1 4748 0
 577 003e 124B     		ldr	r3, .L57+12
 578 0040 1868     		ldr	r0, [r3]
 579 0042 0F4B     		ldr	r3, .L57+4
 580 0044 1968     		ldr	r1, [r3]
 581 0046 0431     		adds	r1, r1, #4
 582 0048 FFF7FEFF 		bl	vListInsert
 583              	.LVL49:
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 584              		.loc 1 4753 0
 585 004c 0F4B     		ldr	r3, .L57+16
 586 004e 1B68     		ldr	r3, [r3]
 587 0050 9C42     		cmp	r4, r3
 588 0052 01D2     		bcs	.L49
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 589              		.loc 1 4755 0
 590 0054 0D4B     		ldr	r3, .L57+16
 591 0056 1C60     		str	r4, [r3]
 592              	.L49:
 593 0058 70BD     		pop	{r4, r5, r6, pc}
 594              	.LVL50:
 595              	.L55:
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 596              		.loc 1 4721 0 discriminator 1
 597 005a 002E     		cmp	r6, #0
 598 005c E9D0     		beq	.L51
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 599              		.loc 1 4726 0
 600 005e 084B     		ldr	r3, .L57+4
 601 0060 1968     		ldr	r1, [r3]
 602 0062 0431     		adds	r1, r1, #4
 603 0064 0A48     		ldr	r0, .L57+20
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 100


 604 0066 FFF7FEFF 		bl	vListInsertEnd
 605              	.LVL51:
 606 006a 70BD     		pop	{r4, r5, r6, pc}
 607              	.LVL52:
 608              	.L56:
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 609              		.loc 1 4742 0
 610 006c 094B     		ldr	r3, .L57+24
 611 006e 1868     		ldr	r0, [r3]
 612 0070 034B     		ldr	r3, .L57+4
 613 0072 1968     		ldr	r1, [r3]
 614 0074 0431     		adds	r1, r1, #4
 615 0076 FFF7FEFF 		bl	vListInsert
 616              	.LVL53:
 617 007a 70BD     		pop	{r4, r5, r6, pc}
 618              	.LVL54:
 619              	.L58:
 620              		.align	2
 621              	.L57:
 622 007c 00000000 		.word	.LANCHOR14
 623 0080 00000000 		.word	.LANCHOR10
 624 0084 00000000 		.word	.LANCHOR13
 625 0088 00000000 		.word	.LANCHOR2
 626 008c 00000000 		.word	.LANCHOR3
 627 0090 00000000 		.word	.LANCHOR0
 628 0094 00000000 		.word	.LANCHOR8
 629              		.cfi_endproc
 630              	.LFE51:
 632              		.section	.text.xTaskCreate,"ax",%progbits
 633              		.align	1
 634              		.global	xTaskCreate
 635              		.syntax unified
 636              		.thumb
 637              		.thumb_func
 638              		.fpu fpv4-sp-d16
 640              	xTaskCreate:
 641              	.LFB5:
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 642              		.loc 1 682 0
 643              		.cfi_startproc
 644              		@ args = 8, pretend = 0, frame = 0
 645              		@ frame_needed = 0, uses_anonymous_args = 0
 646              	.LVL55:
 647 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 648              	.LCFI5:
 649              		.cfi_def_cfa_offset 28
 650              		.cfi_offset 4, -28
 651              		.cfi_offset 5, -24
 652              		.cfi_offset 6, -20
 653              		.cfi_offset 7, -16
 654              		.cfi_offset 8, -12
 655              		.cfi_offset 9, -8
 656              		.cfi_offset 14, -4
 657 0004 85B0     		sub	sp, sp, #20
 658              	.LCFI6:
 659              		.cfi_def_cfa_offset 48
 660 0006 0646     		mov	r6, r0
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 101


 661 0008 0F46     		mov	r7, r1
 662 000a 1546     		mov	r5, r2
 663 000c 9846     		mov	r8, r3
 664              	.LBB92:
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 665              		.loc 1 716 0
 666 000e 9000     		lsls	r0, r2, #2
 667              	.LVL56:
 668 0010 FFF7FEFF 		bl	pvPortMalloc
 669              	.LVL57:
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 670              		.loc 1 718 0
 671 0014 00B3     		cbz	r0, .L63
 672 0016 8146     		mov	r9, r0
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 673              		.loc 1 721 0
 674 0018 5420     		movs	r0, #84
 675              	.LVL58:
 676 001a FFF7FEFF 		bl	pvPortMalloc
 677              	.LVL59:
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 678              		.loc 1 723 0
 679 001e 0446     		mov	r4, r0
 680 0020 B0B1     		cbz	r0, .L61
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 681              		.loc 1 726 0
 682 0022 C0F83090 		str	r9, [r0, #48]
 683              	.LVL60:
 684              	.L60:
 685              	.LBE92:
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 686              		.loc 1 742 0
 687 0026 CCB1     		cbz	r4, .L64
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 688              		.loc 1 752 0
 689 0028 0023     		movs	r3, #0
 690 002a 0393     		str	r3, [sp, #12]
 691 002c 0294     		str	r4, [sp, #8]
 692 002e 0D9B     		ldr	r3, [sp, #52]
 693 0030 0193     		str	r3, [sp, #4]
 694 0032 0C9B     		ldr	r3, [sp, #48]
 695 0034 0093     		str	r3, [sp]
 696 0036 4346     		mov	r3, r8
 697 0038 2A46     		mov	r2, r5
 698 003a 3946     		mov	r1, r7
 699 003c 3046     		mov	r0, r6
 700 003e FFF7FEFF 		bl	prvInitialiseNewTask
 701              	.LVL61:
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 702              		.loc 1 753 0
 703 0042 2046     		mov	r0, r4
 704 0044 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 705              	.LVL62:
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 706              		.loc 1 754 0
 707 0048 0120     		movs	r0, #1
 708              	.LVL63:
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 102


 709              	.L59:
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 710              		.loc 1 762 0
 711 004a 05B0     		add	sp, sp, #20
 712              	.LCFI7:
 713              		.cfi_remember_state
 714              		.cfi_def_cfa_offset 28
 715              		@ sp needed
 716 004c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 717              	.LVL64:
 718              	.L61:
 719              	.LCFI8:
 720              		.cfi_restore_state
 721              	.LBB93:
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 722              		.loc 1 732 0
 723 0050 4846     		mov	r0, r9
 724              	.LVL65:
 725 0052 FFF7FEFF 		bl	vPortFree
 726              	.LVL66:
 727 0056 E6E7     		b	.L60
 728              	.LVL67:
 729              	.L63:
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 730              		.loc 1 737 0
 731 0058 0024     		movs	r4, #0
 732 005a E4E7     		b	.L60
 733              	.LVL68:
 734              	.L64:
 735              	.LBE93:
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 736              		.loc 1 758 0
 737 005c 4FF0FF30 		mov	r0, #-1
 738              	.LVL69:
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 739              		.loc 1 761 0
 740 0060 F3E7     		b	.L59
 741              		.cfi_endproc
 742              	.LFE5:
 744              		.section	.text.vTaskDelete,"ax",%progbits
 745              		.align	1
 746              		.global	vTaskDelete
 747              		.syntax unified
 748              		.thumb
 749              		.thumb_func
 750              		.fpu fpv4-sp-d16
 752              	vTaskDelete:
 753              	.LFB8:
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 754              		.loc 1 1049 0
 755              		.cfi_startproc
 756              		@ args = 0, pretend = 0, frame = 0
 757              		@ frame_needed = 0, uses_anonymous_args = 0
 758              	.LVL70:
 759 0000 38B5     		push	{r3, r4, r5, lr}
 760              	.LCFI9:
 761              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 103


 762              		.cfi_offset 3, -16
 763              		.cfi_offset 4, -12
 764              		.cfi_offset 5, -8
 765              		.cfi_offset 14, -4
 766 0002 0446     		mov	r4, r0
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 767              		.loc 1 1052 0
 768 0004 FFF7FEFF 		bl	vPortEnterCritical
 769              	.LVL71:
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 770              		.loc 1 1056 0
 771 0008 002C     		cmp	r4, #0
 772 000a 34D0     		beq	.L77
 773              	.LVL72:
 774              	.L67:
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 775              		.loc 1 1059 0 discriminator 4
 776 000c 251D     		adds	r5, r4, #4
 777 000e 2846     		mov	r0, r5
 778 0010 FFF7FEFF 		bl	uxListRemove
 779              	.LVL73:
 780 0014 70B9     		cbnz	r0, .L68
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 781              		.loc 1 1061 0
 782 0016 E26A     		ldr	r2, [r4, #44]
 783 0018 02EB8201 		add	r1, r2, r2, lsl #2
 784 001c 8B00     		lsls	r3, r1, #2
 785 001e 2649     		ldr	r1, .L80
 786 0020 CB58     		ldr	r3, [r1, r3]
 787 0022 3BB9     		cbnz	r3, .L68
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 788              		.loc 1 1061 0 is_stmt 0 discriminator 1
 789 0024 0123     		movs	r3, #1
 790 0026 03FA02F2 		lsl	r2, r3, r2
 791 002a 2449     		ldr	r1, .L80+4
 792 002c 0B68     		ldr	r3, [r1]
 793 002e 23EA0203 		bic	r3, r3, r2
 794 0032 0B60     		str	r3, [r1]
 795              	.L68:
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 796              		.loc 1 1069 0 is_stmt 1
 797 0034 A36A     		ldr	r3, [r4, #40]
 798 0036 1BB1     		cbz	r3, .L69
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 799              		.loc 1 1071 0
 800 0038 04F11800 		add	r0, r4, #24
 801 003c FFF7FEFF 		bl	uxListRemove
 802              	.LVL74:
 803              	.L69:
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 804              		.loc 1 1082 0
 805 0040 1F4A     		ldr	r2, .L80+8
 806 0042 1368     		ldr	r3, [r2]
 807 0044 0133     		adds	r3, r3, #1
 808 0046 1360     		str	r3, [r2]
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 809              		.loc 1 1084 0
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 104


 810 0048 1E4B     		ldr	r3, .L80+12
 811 004a 1B68     		ldr	r3, [r3]
 812 004c 9C42     		cmp	r4, r3
 813 004e 15D0     		beq	.L78
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 814              		.loc 1 1107 0
 815 0050 1D4A     		ldr	r2, .L80+16
 816 0052 1368     		ldr	r3, [r2]
 817 0054 013B     		subs	r3, r3, #1
 818 0056 1360     		str	r3, [r2]
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 819              		.loc 1 1108 0
 820 0058 2046     		mov	r0, r4
 821 005a FFF7FEFF 		bl	prvDeleteTCB
 822              	.LVL75:
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 823              		.loc 1 1112 0
 824 005e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 825              	.LVL76:
 826              	.L71:
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 827              		.loc 1 1117 0
 828 0062 FFF7FEFF 		bl	vPortExitCritical
 829              	.LVL77:
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 830              		.loc 1 1121 0
 831 0066 194B     		ldr	r3, .L80+20
 832 0068 1B68     		ldr	r3, [r3]
 833 006a 1BB1     		cbz	r3, .L66
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 834              		.loc 1 1123 0
 835 006c 154B     		ldr	r3, .L80+12
 836 006e 1B68     		ldr	r3, [r3]
 837 0070 9C42     		cmp	r4, r3
 838 0072 0CD0     		beq	.L79
 839              	.L66:
 840 0074 38BD     		pop	{r3, r4, r5, pc}
 841              	.LVL78:
 842              	.L77:
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 843              		.loc 1 1056 0 discriminator 1
 844 0076 134B     		ldr	r3, .L80+12
 845 0078 1C68     		ldr	r4, [r3]
 846              	.LVL79:
 847 007a C7E7     		b	.L67
 848              	.LVL80:
 849              	.L78:
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 850              		.loc 1 1091 0
 851 007c 2946     		mov	r1, r5
 852 007e 1448     		ldr	r0, .L80+24
 853 0080 FFF7FEFF 		bl	vListInsertEnd
 854              	.LVL81:
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 855              		.loc 1 1096 0
 856 0084 134A     		ldr	r2, .L80+28
 857 0086 1368     		ldr	r3, [r2]
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 105


 858 0088 0133     		adds	r3, r3, #1
 859 008a 1360     		str	r3, [r2]
 860 008c E9E7     		b	.L71
 861              	.L79:
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 862              		.loc 1 1125 0
 863 008e 124B     		ldr	r3, .L80+32
 864 0090 1B68     		ldr	r3, [r3]
 865 0092 43B1     		cbz	r3, .L73
 866              	.LBB94:
 867              	.LBB95:
 868              		.loc 2 237 0
 869              		.syntax unified
 870              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 871 0094 4FF05003 			mov r3, #80												
 872 0098 83F31188 		msr basepri, r3											
 873 009c BFF36F8F 		isb														
 874 00a0 BFF34F8F 		dsb														
 875              	
 876              	@ 0 "" 2
 877              	.LVL82:
 878              		.thumb
 879              		.syntax unified
 880              	.L74:
 881 00a4 FEE7     		b	.L74
 882              	.L73:
 883              	.LBE95:
 884              	.LBE94:
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 885              		.loc 1 1126 0
 886 00a6 4FF08052 		mov	r2, #268435456
 887 00aa 0C4B     		ldr	r3, .L80+36
 888 00ac 1A60     		str	r2, [r3]
 889              		.syntax unified
 890              	@ 1126 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 891 00ae BFF34F8F 		dsb
 892              	@ 0 "" 2
 893              	@ 1126 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 894 00b2 BFF36F8F 		isb
 895              	@ 0 "" 2
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 896              		.loc 1 1133 0
 897              		.thumb
 898              		.syntax unified
 899 00b6 DDE7     		b	.L66
 900              	.L81:
 901              		.align	2
 902              	.L80:
 903 00b8 00000000 		.word	.LANCHOR4
 904 00bc 00000000 		.word	.LANCHOR13
 905 00c0 00000000 		.word	.LANCHOR12
 906 00c4 00000000 		.word	.LANCHOR10
 907 00c8 00000000 		.word	.LANCHOR9
 908 00cc 00000000 		.word	.LANCHOR11
 909 00d0 00000000 		.word	.LANCHOR7
 910 00d4 00000000 		.word	.LANCHOR15
 911 00d8 00000000 		.word	.LANCHOR16
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 106


 912 00dc 04ED00E0 		.word	-536810236
 913              		.cfi_endproc
 914              	.LFE8:
 916              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 917              		.align	1
 918              		.global	uxTaskPriorityGet
 919              		.syntax unified
 920              		.thumb
 921              		.thumb_func
 922              		.fpu fpv4-sp-d16
 924              	uxTaskPriorityGet:
 925              	.LFB10:
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 926              		.loc 1 1341 0
 927              		.cfi_startproc
 928              		@ args = 0, pretend = 0, frame = 0
 929              		@ frame_needed = 0, uses_anonymous_args = 0
 930              	.LVL83:
 931 0000 10B5     		push	{r4, lr}
 932              	.LCFI10:
 933              		.cfi_def_cfa_offset 8
 934              		.cfi_offset 4, -8
 935              		.cfi_offset 14, -4
 936 0002 0446     		mov	r4, r0
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 937              		.loc 1 1345 0
 938 0004 FFF7FEFF 		bl	vPortEnterCritical
 939              	.LVL84:
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 940              		.loc 1 1349 0
 941 0008 24B1     		cbz	r4, .L86
 942              	.LVL85:
 943              	.L83:
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 944              		.loc 1 1350 0 discriminator 4
 945 000a E46A     		ldr	r4, [r4, #44]
 946              	.LVL86:
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 947              		.loc 1 1352 0 discriminator 4
 948 000c FFF7FEFF 		bl	vPortExitCritical
 949              	.LVL87:
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 950              		.loc 1 1355 0 discriminator 4
 951 0010 2046     		mov	r0, r4
 952 0012 10BD     		pop	{r4, pc}
 953              	.LVL88:
 954              	.L86:
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 955              		.loc 1 1349 0 discriminator 1
 956 0014 014B     		ldr	r3, .L87
 957 0016 1C68     		ldr	r4, [r3]
 958              	.LVL89:
 959 0018 F7E7     		b	.L83
 960              	.L88:
 961 001a 00BF     		.align	2
 962              	.L87:
 963 001c 00000000 		.word	.LANCHOR10
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 107


 964              		.cfi_endproc
 965              	.LFE10:
 967              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 968              		.align	1
 969              		.global	uxTaskPriorityGetFromISR
 970              		.syntax unified
 971              		.thumb
 972              		.thumb_func
 973              		.fpu fpv4-sp-d16
 975              	uxTaskPriorityGetFromISR:
 976              	.LFB11:
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 977              		.loc 1 1363 0
 978              		.cfi_startproc
 979              		@ args = 0, pretend = 0, frame = 0
 980              		@ frame_needed = 0, uses_anonymous_args = 0
 981              	.LVL90:
 982 0000 10B5     		push	{r4, lr}
 983              	.LCFI11:
 984              		.cfi_def_cfa_offset 8
 985              		.cfi_offset 4, -8
 986              		.cfi_offset 14, -4
 987 0002 0446     		mov	r4, r0
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 988              		.loc 1 1383 0
 989 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 990              	.LVL91:
 991              	.LBB96:
 992              	.LBB97:
 238:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 239:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 242:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 243:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 245:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 246:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 993              		.loc 2 253 0
 994              		.syntax unified
 995              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 996 0008 EFF31183 			mrs r3, basepri											
 997 000c 4FF05002 		mov r2, #80												
 998 0010 82F31188 		msr basepri, r2											
 999 0014 BFF36F8F 		isb														
 1000 0018 BFF34F8F 		dsb														
 1001              	
 1002              	@ 0 "" 2
 1003              		.thumb
 1004              		.syntax unified
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 108


 1005              	.LBE97:
 1006              	.LBE96:
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1007              		.loc 1 1389 0
 1008 001c 1CB1     		cbz	r4, .L93
 1009              	.LVL92:
 1010              	.L90:
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1011              		.loc 1 1390 0 discriminator 4
 1012 001e E06A     		ldr	r0, [r4, #44]
 1013              	.LVL93:
 1014              	.LBB98:
 1015              	.LBB99:
 254:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 259:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 260:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 262:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 263:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 266:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 267:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 268:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 269:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 271:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1016              		.loc 2 271 0 discriminator 4
 1017              		.syntax unified
 1018              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1019 0020 83F31188 			msr basepri, r3	
 1020              	@ 0 "" 2
 1021              	.LVL94:
 1022              		.thumb
 1023              		.syntax unified
 1024              	.LBE99:
 1025              	.LBE98:
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1026              		.loc 1 1395 0 discriminator 4
 1027 0024 10BD     		pop	{r4, pc}
 1028              	.LVL95:
 1029              	.L93:
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1030              		.loc 1 1389 0 discriminator 1
 1031 0026 014A     		ldr	r2, .L94
 1032 0028 1468     		ldr	r4, [r2]
 1033              	.LVL96:
 1034 002a F8E7     		b	.L90
 1035              	.L95:
 1036              		.align	2
 1037              	.L94:
 1038 002c 00000000 		.word	.LANCHOR10
 1039              		.cfi_endproc
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 109


 1040              	.LFE11:
 1042              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1043              		.align	1
 1044              		.global	vTaskPrioritySet
 1045              		.syntax unified
 1046              		.thumb
 1047              		.thumb_func
 1048              		.fpu fpv4-sp-d16
 1050              	vTaskPrioritySet:
 1051              	.LFB12:
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1052              		.loc 1 1403 0
 1053              		.cfi_startproc
 1054              		@ args = 0, pretend = 0, frame = 0
 1055              		@ frame_needed = 0, uses_anonymous_args = 0
 1056              	.LVL97:
 1057 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1058              	.LCFI12:
 1059              		.cfi_def_cfa_offset 24
 1060              		.cfi_offset 3, -24
 1061              		.cfi_offset 4, -20
 1062              		.cfi_offset 5, -16
 1063              		.cfi_offset 6, -12
 1064              		.cfi_offset 7, -8
 1065              		.cfi_offset 14, -4
 1066              	.LVL98:
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1067              		.loc 1 1408 0
 1068 0002 0629     		cmp	r1, #6
 1069 0004 08D9     		bls	.L97
 1070              	.LBB100:
 1071              	.LBB101:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1072              		.loc 2 237 0
 1073              		.syntax unified
 1074              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1075 0006 4FF05003 			mov r3, #80												
 1076 000a 83F31188 		msr basepri, r3											
 1077 000e BFF36F8F 		isb														
 1078 0012 BFF34F8F 		dsb														
 1079              	
 1080              	@ 0 "" 2
 1081              	.LVL99:
 1082              		.thumb
 1083              		.syntax unified
 1084              	.L98:
 1085 0016 FEE7     		b	.L98
 1086              	.L97:
 1087 0018 0D46     		mov	r5, r1
 1088 001a 0446     		mov	r4, r0
 1089              	.LVL100:
 1090              	.LBE101:
 1091              	.LBE100:
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1092              		.loc 1 1420 0
 1093 001c FFF7FEFF 		bl	vPortEnterCritical
 1094              	.LVL101:
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 110


1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1095              		.loc 1 1424 0
 1096 0020 0CB9     		cbnz	r4, .L99
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1097              		.loc 1 1424 0 is_stmt 0 discriminator 1
 1098 0022 2D4B     		ldr	r3, .L114
 1099 0024 1C68     		ldr	r4, [r3]
 1100              	.LVL102:
 1101              	.L99:
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1102              		.loc 1 1430 0 is_stmt 1 discriminator 4
 1103 0026 636C     		ldr	r3, [r4, #68]
 1104              	.LVL103:
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1105              		.loc 1 1438 0 discriminator 4
 1106 0028 9D42     		cmp	r5, r3
 1107 002a 44D0     		beq	.L100
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1108              		.loc 1 1442 0
 1109 002c 46D9     		bls	.L101
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1110              		.loc 1 1444 0
 1111 002e 2A4A     		ldr	r2, .L114
 1112 0030 1268     		ldr	r2, [r2]
 1113 0032 9442     		cmp	r4, r2
 1114 0034 48D0     		beq	.L109
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1115              		.loc 1 1449 0
 1116 0036 284A     		ldr	r2, .L114
 1117 0038 1268     		ldr	r2, [r2]
 1118 003a D26A     		ldr	r2, [r2, #44]
 1119 003c 9542     		cmp	r5, r2
 1120 003e 45D2     		bcs	.L110
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1121              		.loc 1 1406 0
 1122 0040 0026     		movs	r6, #0
 1123              	.L102:
 1124              	.LVL104:
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1125              		.loc 1 1482 0
 1126 0042 E76A     		ldr	r7, [r4, #44]
 1127              	.LVL105:
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1128              		.loc 1 1488 0
 1129 0044 BB42     		cmp	r3, r7
 1130 0046 00D1     		bne	.L103
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1131              		.loc 1 1490 0
 1132 0048 E562     		str	r5, [r4, #44]
 1133              	.L103:
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1134              		.loc 1 1498 0
 1135 004a 6564     		str	r5, [r4, #68]
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1136              		.loc 1 1508 0
 1137 004c A369     		ldr	r3, [r4, #24]
 1138              	.LVL106:
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 111


 1139 004e 002B     		cmp	r3, #0
 1140 0050 02DB     		blt	.L104
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1141              		.loc 1 1510 0
 1142 0052 C5F10705 		rsb	r5, r5, #7
 1143              	.LVL107:
 1144 0056 A561     		str	r5, [r4, #24]
 1145              	.L104:
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1146              		.loc 1 1521 0
 1147 0058 6169     		ldr	r1, [r4, #20]
 1148 005a 07EB8703 		add	r3, r7, r7, lsl #2
 1149 005e 9A00     		lsls	r2, r3, #2
 1150 0060 1E4B     		ldr	r3, .L114+4
 1151 0062 1344     		add	r3, r3, r2
 1152 0064 9942     		cmp	r1, r3
 1153 0066 35D1     		bne	.L112
 1154 0068 0123     		movs	r3, #1
 1155              	.L105:
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1156              		.loc 1 1521 0 is_stmt 0 discriminator 4
 1157 006a DBB1     		cbz	r3, .L106
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1158              		.loc 1 1526 0 is_stmt 1
 1159 006c 251D     		adds	r5, r4, #4
 1160 006e 2846     		mov	r0, r5
 1161 0070 FFF7FEFF 		bl	uxListRemove
 1162              	.LVL108:
 1163 0074 38B9     		cbnz	r0, .L107
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1164              		.loc 1 1531 0
 1165 0076 0123     		movs	r3, #1
 1166 0078 03FA07F7 		lsl	r7, r3, r7
 1167              	.LVL109:
 1168 007c 184A     		ldr	r2, .L114+8
 1169 007e 1368     		ldr	r3, [r2]
 1170 0080 23EA0703 		bic	r3, r3, r7
 1171 0084 1360     		str	r3, [r2]
 1172              	.L107:
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1173              		.loc 1 1537 0
 1174 0086 E36A     		ldr	r3, [r4, #44]
 1175 0088 0122     		movs	r2, #1
 1176 008a 9A40     		lsls	r2, r2, r3
 1177 008c 1449     		ldr	r1, .L114+8
 1178 008e 0868     		ldr	r0, [r1]
 1179 0090 0243     		orrs	r2, r2, r0
 1180 0092 0A60     		str	r2, [r1]
 1181 0094 03EB8303 		add	r3, r3, r3, lsl #2
 1182 0098 9A00     		lsls	r2, r3, #2
 1183 009a 2946     		mov	r1, r5
 1184 009c 0F48     		ldr	r0, .L114+4
 1185 009e 1044     		add	r0, r0, r2
 1186 00a0 FFF7FEFF 		bl	vListInsertEnd
 1187              	.LVL110:
 1188              	.L106:
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 112


 1189              		.loc 1 1544 0
 1190 00a4 3EB1     		cbz	r6, .L100
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1191              		.loc 1 1546 0
 1192 00a6 4FF08052 		mov	r2, #268435456
 1193 00aa 0E4B     		ldr	r3, .L114+12
 1194 00ac 1A60     		str	r2, [r3]
 1195              		.syntax unified
 1196              	@ 1546 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1197 00ae BFF34F8F 		dsb
 1198              	@ 0 "" 2
 1199              	@ 1546 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1200 00b2 BFF36F8F 		isb
 1201              	@ 0 "" 2
 1202              	.LVL111:
 1203              		.thumb
 1204              		.syntax unified
 1205              	.L100:
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1206              		.loc 1 1558 0
 1207 00b6 FFF7FEFF 		bl	vPortExitCritical
 1208              	.LVL112:
 1209 00ba F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1210              	.LVL113:
 1211              	.L101:
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1212              		.loc 1 1465 0
 1213 00bc 064A     		ldr	r2, .L114
 1214 00be 1268     		ldr	r2, [r2]
 1215 00c0 9442     		cmp	r4, r2
 1216 00c2 05D0     		beq	.L111
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1217              		.loc 1 1406 0
 1218 00c4 0026     		movs	r6, #0
 1219 00c6 BCE7     		b	.L102
 1220              	.L109:
 1221 00c8 0026     		movs	r6, #0
 1222 00ca BAE7     		b	.L102
 1223              	.L110:
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1224              		.loc 1 1451 0
 1225 00cc 0126     		movs	r6, #1
 1226 00ce B8E7     		b	.L102
 1227              	.L111:
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1228              		.loc 1 1470 0
 1229 00d0 0126     		movs	r6, #1
 1230 00d2 B6E7     		b	.L102
 1231              	.LVL114:
 1232              	.L112:
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1233              		.loc 1 1521 0
 1234 00d4 0023     		movs	r3, #0
 1235 00d6 C8E7     		b	.L105
 1236              	.L115:
 1237              		.align	2
 1238              	.L114:
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 113


 1239 00d8 00000000 		.word	.LANCHOR10
 1240 00dc 00000000 		.word	.LANCHOR4
 1241 00e0 00000000 		.word	.LANCHOR13
 1242 00e4 04ED00E0 		.word	-536810236
 1243              		.cfi_endproc
 1244              	.LFE12:
 1246              		.section	.text.vTaskResume,"ax",%progbits
 1247              		.align	1
 1248              		.global	vTaskResume
 1249              		.syntax unified
 1250              		.thumb
 1251              		.thumb_func
 1252              		.fpu fpv4-sp-d16
 1254              	vTaskResume:
 1255              	.LFB15:
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1256              		.loc 1 1703 0
 1257              		.cfi_startproc
 1258              		@ args = 0, pretend = 0, frame = 0
 1259              		@ frame_needed = 0, uses_anonymous_args = 0
 1260              	.LVL115:
 1261 0000 38B5     		push	{r3, r4, r5, lr}
 1262              	.LCFI13:
 1263              		.cfi_def_cfa_offset 16
 1264              		.cfi_offset 3, -16
 1265              		.cfi_offset 4, -12
 1266              		.cfi_offset 5, -8
 1267              		.cfi_offset 14, -4
 1268              	.LVL116:
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1269              		.loc 1 1707 0
 1270 0002 68B1     		cbz	r0, .L122
 1271 0004 0446     		mov	r4, r0
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1272              		.loc 1 1711 0 discriminator 1
 1273 0006 1C4B     		ldr	r3, .L124
 1274 0008 1B68     		ldr	r3, [r3]
 1275 000a 9842     		cmp	r0, r3
 1276 000c 07D0     		beq	.L116
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1277              		.loc 1 1713 0
 1278 000e FFF7FEFF 		bl	vPortEnterCritical
 1279              	.LVL117:
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1280              		.loc 1 1715 0
 1281 0012 2046     		mov	r0, r4
 1282 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1283              	.LVL118:
 1284 0018 58B9     		cbnz	r0, .L123
 1285              	.L120:
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1286              		.loc 1 1742 0
 1287 001a FFF7FEFF 		bl	vPortExitCritical
 1288              	.LVL119:
 1289              	.L116:
 1290 001e 38BD     		pop	{r3, r4, r5, pc}
 1291              	.LVL120:
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 114


 1292              	.L122:
 1293              	.LBB102:
 1294              	.LBB103:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1295              		.loc 2 237 0
 1296              		.syntax unified
 1297              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1298 0020 4FF05003 			mov r3, #80												
 1299 0024 83F31188 		msr basepri, r3											
 1300 0028 BFF36F8F 		isb														
 1301 002c BFF34F8F 		dsb														
 1302              	
 1303              	@ 0 "" 2
 1304              	.LVL121:
 1305              		.thumb
 1306              		.syntax unified
 1307              	.L118:
 1308 0030 FEE7     		b	.L118
 1309              	.LVL122:
 1310              	.L123:
 1311              	.LBE103:
 1312              	.LBE102:
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1313              		.loc 1 1721 0
 1314 0032 251D     		adds	r5, r4, #4
 1315 0034 2846     		mov	r0, r5
 1316 0036 FFF7FEFF 		bl	uxListRemove
 1317              	.LVL123:
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1318              		.loc 1 1722 0
 1319 003a E36A     		ldr	r3, [r4, #44]
 1320 003c 0122     		movs	r2, #1
 1321 003e 9A40     		lsls	r2, r2, r3
 1322 0040 0E49     		ldr	r1, .L124+4
 1323 0042 0868     		ldr	r0, [r1]
 1324 0044 0243     		orrs	r2, r2, r0
 1325 0046 0A60     		str	r2, [r1]
 1326 0048 03EB8303 		add	r3, r3, r3, lsl #2
 1327 004c 9A00     		lsls	r2, r3, #2
 1328 004e 2946     		mov	r1, r5
 1329 0050 0B48     		ldr	r0, .L124+8
 1330 0052 1044     		add	r0, r0, r2
 1331 0054 FFF7FEFF 		bl	vListInsertEnd
 1332              	.LVL124:
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1333              		.loc 1 1725 0
 1334 0058 E26A     		ldr	r2, [r4, #44]
 1335 005a 074B     		ldr	r3, .L124
 1336 005c 1B68     		ldr	r3, [r3]
 1337 005e DB6A     		ldr	r3, [r3, #44]
 1338 0060 9A42     		cmp	r2, r3
 1339 0062 DAD3     		bcc	.L120
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1340              		.loc 1 1730 0
 1341 0064 4FF08052 		mov	r2, #268435456
 1342 0068 064B     		ldr	r3, .L124+12
 1343 006a 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 115


 1344              		.syntax unified
 1345              	@ 1730 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1346 006c BFF34F8F 		dsb
 1347              	@ 0 "" 2
 1348              	@ 1730 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1349 0070 BFF36F8F 		isb
 1350              	@ 0 "" 2
 1351              		.thumb
 1352              		.syntax unified
 1353 0074 D1E7     		b	.L120
 1354              	.L125:
 1355 0076 00BF     		.align	2
 1356              	.L124:
 1357 0078 00000000 		.word	.LANCHOR10
 1358 007c 00000000 		.word	.LANCHOR13
 1359 0080 00000000 		.word	.LANCHOR4
 1360 0084 04ED00E0 		.word	-536810236
 1361              		.cfi_endproc
 1362              	.LFE15:
 1364              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1365              		.align	1
 1366              		.global	xTaskResumeFromISR
 1367              		.syntax unified
 1368              		.thumb
 1369              		.thumb_func
 1370              		.fpu fpv4-sp-d16
 1372              	xTaskResumeFromISR:
 1373              	.LFB16:
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1374              		.loc 1 1757 0
 1375              		.cfi_startproc
 1376              		@ args = 0, pretend = 0, frame = 0
 1377              		@ frame_needed = 0, uses_anonymous_args = 0
 1378              	.LVL125:
 1379 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1380              	.LCFI14:
 1381              		.cfi_def_cfa_offset 24
 1382              		.cfi_offset 3, -24
 1383              		.cfi_offset 4, -20
 1384              		.cfi_offset 5, -16
 1385              		.cfi_offset 6, -12
 1386              		.cfi_offset 7, -8
 1387              		.cfi_offset 14, -4
 1388              	.LVL126:
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1389              		.loc 1 1762 0
 1390 0002 0028     		cmp	r0, #0
 1391 0004 32D0     		beq	.L135
 1392 0006 0446     		mov	r4, r0
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1393              		.loc 1 1780 0
 1394 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1395              	.LVL127:
 1396              	.LBB104:
 1397              	.LBB105:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1398              		.loc 2 253 0
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 116


 1399              		.syntax unified
 1400              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1401 000c EFF31187 			mrs r7, basepri											
 1402 0010 4FF05003 		mov r3, #80												
 1403 0014 83F31188 		msr basepri, r3											
 1404 0018 BFF36F8F 		isb														
 1405 001c BFF34F8F 		dsb														
 1406              	
 1407              	@ 0 "" 2
 1408              		.thumb
 1409              		.syntax unified
 1410              	.LBE105:
 1411              	.LBE104:
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1412              		.loc 1 1784 0
 1413 0020 2046     		mov	r0, r4
 1414 0022 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1415              	.LVL128:
 1416 0026 0028     		cmp	r0, #0
 1417 0028 32D0     		beq	.L132
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1418              		.loc 1 1789 0
 1419 002a 1A4B     		ldr	r3, .L137
 1420 002c 1B68     		ldr	r3, [r3]
 1421 002e 43BB     		cbnz	r3, .L130
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1422              		.loc 1 1793 0
 1423 0030 E26A     		ldr	r2, [r4, #44]
 1424 0032 194B     		ldr	r3, .L137+4
 1425 0034 1B68     		ldr	r3, [r3]
 1426 0036 DB6A     		ldr	r3, [r3, #44]
 1427 0038 9A42     		cmp	r2, r3
 1428 003a 20D3     		bcc	.L136
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1429              		.loc 1 1795 0
 1430 003c 0125     		movs	r5, #1
 1431              	.L131:
 1432              	.LVL129:
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1433              		.loc 1 1802 0
 1434 003e 261D     		adds	r6, r4, #4
 1435 0040 3046     		mov	r0, r6
 1436 0042 FFF7FEFF 		bl	uxListRemove
 1437              	.LVL130:
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1438              		.loc 1 1803 0
 1439 0046 E36A     		ldr	r3, [r4, #44]
 1440 0048 0122     		movs	r2, #1
 1441 004a 9A40     		lsls	r2, r2, r3
 1442 004c 1349     		ldr	r1, .L137+8
 1443 004e 0868     		ldr	r0, [r1]
 1444 0050 0243     		orrs	r2, r2, r0
 1445 0052 0A60     		str	r2, [r1]
 1446 0054 03EB8303 		add	r3, r3, r3, lsl #2
 1447 0058 9A00     		lsls	r2, r3, #2
 1448 005a 3146     		mov	r1, r6
 1449 005c 1048     		ldr	r0, .L137+12
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 117


 1450 005e 1044     		add	r0, r0, r2
 1451 0060 FFF7FEFF 		bl	vListInsertEnd
 1452              	.LVL131:
 1453              	.L129:
 1454              	.LBB106:
 1455              	.LBB107:
 1456              		.loc 2 271 0
 1457              		.syntax unified
 1458              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1459 0064 87F31188 			msr basepri, r7	
 1460              	@ 0 "" 2
 1461              	.LVL132:
 1462              		.thumb
 1463              		.syntax unified
 1464              	.LBE107:
 1465              	.LBE106:
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1466              		.loc 1 1821 0
 1467 0068 2846     		mov	r0, r5
 1468 006a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1469              	.LVL133:
 1470              	.L135:
 1471              	.LBB108:
 1472              	.LBB109:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1473              		.loc 2 237 0
 1474              		.syntax unified
 1475              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1476 006c 4FF05003 			mov r3, #80												
 1477 0070 83F31188 		msr basepri, r3											
 1478 0074 BFF36F8F 		isb														
 1479 0078 BFF34F8F 		dsb														
 1480              	
 1481              	@ 0 "" 2
 1482              	.LVL134:
 1483              		.thumb
 1484              		.syntax unified
 1485              	.L128:
 1486 007c FEE7     		b	.L128
 1487              	.LVL135:
 1488              	.L136:
 1489              	.LBE109:
 1490              	.LBE108:
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1491              		.loc 1 1758 0
 1492 007e 0025     		movs	r5, #0
 1493 0080 DDE7     		b	.L131
 1494              	.L130:
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1495              		.loc 1 1810 0
 1496 0082 04F11801 		add	r1, r4, #24
 1497 0086 0748     		ldr	r0, .L137+16
 1498 0088 FFF7FEFF 		bl	vListInsertEnd
 1499              	.LVL136:
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1500              		.loc 1 1758 0
 1501 008c 0025     		movs	r5, #0
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 118


 1502 008e E9E7     		b	.L129
 1503              	.L132:
 1504 0090 0025     		movs	r5, #0
 1505 0092 E7E7     		b	.L129
 1506              	.L138:
 1507              		.align	2
 1508              	.L137:
 1509 0094 00000000 		.word	.LANCHOR16
 1510 0098 00000000 		.word	.LANCHOR10
 1511 009c 00000000 		.word	.LANCHOR13
 1512 00a0 00000000 		.word	.LANCHOR4
 1513 00a4 00000000 		.word	.LANCHOR1
 1514              		.cfi_endproc
 1515              	.LFE16:
 1517              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1518              		.align	1
 1519              		.global	vTaskStartScheduler
 1520              		.syntax unified
 1521              		.thumb
 1522              		.thumb_func
 1523              		.fpu fpv4-sp-d16
 1525              	vTaskStartScheduler:
 1526              	.LFB17:
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1527              		.loc 1 1827 0
 1528              		.cfi_startproc
 1529              		@ args = 0, pretend = 0, frame = 0
 1530              		@ frame_needed = 0, uses_anonymous_args = 0
 1531 0000 00B5     		push	{lr}
 1532              	.LCFI15:
 1533              		.cfi_def_cfa_offset 4
 1534              		.cfi_offset 14, -4
 1535 0002 83B0     		sub	sp, sp, #12
 1536              	.LCFI16:
 1537              		.cfi_def_cfa_offset 16
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
 1538              		.loc 1 1860 0
 1539 0004 174B     		ldr	r3, .L146
 1540 0006 0193     		str	r3, [sp, #4]
 1541 0008 0023     		movs	r3, #0
 1542 000a 0093     		str	r3, [sp]
 1543 000c 8022     		movs	r2, #128
 1544 000e 1649     		ldr	r1, .L146+4
 1545 0010 1648     		ldr	r0, .L146+8
 1546 0012 FFF7FEFF 		bl	xTaskCreate
 1547              	.LVL137:
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1548              		.loc 1 1881 0
 1549 0016 0128     		cmp	r0, #1
 1550 0018 05D0     		beq	.L144
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1551              		.loc 1 1924 0
 1552 001a B0F1FF3F 		cmp	r0, #-1
 1553 001e 17D0     		beq	.L145
 1554              	.LVL138:
 1555              	.L139:
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 119


 1556              		.loc 1 1930 0
 1557 0020 03B0     		add	sp, sp, #12
 1558              	.LCFI17:
 1559              		.cfi_remember_state
 1560              		.cfi_def_cfa_offset 4
 1561              		@ sp needed
 1562 0022 5DF804FB 		ldr	pc, [sp], #4
 1563              	.LVL139:
 1564              	.L144:
 1565              	.LCFI18:
 1566              		.cfi_restore_state
 1567              	.LBB110:
 1568              	.LBB111:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1569              		.loc 2 237 0
 1570              		.syntax unified
 1571              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1572 0026 4FF05003 			mov r3, #80												
 1573 002a 83F31188 		msr basepri, r3											
 1574 002e BFF36F8F 		isb														
 1575 0032 BFF34F8F 		dsb														
 1576              	
 1577              	@ 0 "" 2
 1578              		.thumb
 1579              		.syntax unified
 1580              	.LBE111:
 1581              	.LBE110:
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1582              		.loc 1 1898 0
 1583 0036 4FF0FF32 		mov	r2, #-1
 1584 003a 0D4B     		ldr	r3, .L146+12
 1585 003c 1A60     		str	r2, [r3]
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1586              		.loc 1 1899 0
 1587 003e 0122     		movs	r2, #1
 1588 0040 0C4B     		ldr	r3, .L146+16
 1589 0042 1A60     		str	r2, [r3]
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1590              		.loc 1 1900 0
 1591 0044 0022     		movs	r2, #0
 1592 0046 0C4B     		ldr	r3, .L146+20
 1593 0048 1A60     		str	r2, [r3]
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1594              		.loc 1 1909 0
 1595 004a FFF7FEFF 		bl	xPortStartScheduler
 1596              	.LVL140:
 1597 004e E7E7     		b	.L139
 1598              	.LVL141:
 1599              	.L145:
 1600              	.LBB112:
 1601              	.LBB113:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1602              		.loc 2 237 0
 1603              		.syntax unified
 1604              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1605 0050 4FF05003 			mov r3, #80												
 1606 0054 83F31188 		msr basepri, r3											
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 120


 1607 0058 BFF36F8F 		isb														
 1608 005c BFF34F8F 		dsb														
 1609              	
 1610              	@ 0 "" 2
 1611              	.LVL142:
 1612              		.thumb
 1613              		.syntax unified
 1614              	.L142:
 1615 0060 FEE7     		b	.L142
 1616              	.L147:
 1617 0062 00BF     		.align	2
 1618              	.L146:
 1619 0064 00000000 		.word	.LANCHOR17
 1620 0068 00000000 		.word	.LC0
 1621 006c 00000000 		.word	prvIdleTask
 1622 0070 00000000 		.word	.LANCHOR3
 1623 0074 00000000 		.word	.LANCHOR11
 1624 0078 00000000 		.word	.LANCHOR14
 1625              	.LBE113:
 1626              	.LBE112:
 1627              		.cfi_endproc
 1628              	.LFE17:
 1630              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1631              		.align	1
 1632              		.global	vTaskEndScheduler
 1633              		.syntax unified
 1634              		.thumb
 1635              		.thumb_func
 1636              		.fpu fpv4-sp-d16
 1638              	vTaskEndScheduler:
 1639              	.LFB18:
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1640              		.loc 1 1934 0
 1641              		.cfi_startproc
 1642              		@ args = 0, pretend = 0, frame = 0
 1643              		@ frame_needed = 0, uses_anonymous_args = 0
 1644 0000 08B5     		push	{r3, lr}
 1645              	.LCFI19:
 1646              		.cfi_def_cfa_offset 8
 1647              		.cfi_offset 3, -8
 1648              		.cfi_offset 14, -4
 1649              	.LBB114:
 1650              	.LBB115:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1651              		.loc 2 237 0
 1652              		.syntax unified
 1653              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1654 0002 4FF05003 			mov r3, #80												
 1655 0006 83F31188 		msr basepri, r3											
 1656 000a BFF36F8F 		isb														
 1657 000e BFF34F8F 		dsb														
 1658              	
 1659              	@ 0 "" 2
 1660              		.thumb
 1661              		.syntax unified
 1662              	.LBE115:
 1663              	.LBE114:
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 121


1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 1664              		.loc 1 1939 0
 1665 0012 0022     		movs	r2, #0
 1666 0014 024B     		ldr	r3, .L150
 1667 0016 1A60     		str	r2, [r3]
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1668              		.loc 1 1940 0
 1669 0018 FFF7FEFF 		bl	vPortEndScheduler
 1670              	.LVL143:
 1671 001c 08BD     		pop	{r3, pc}
 1672              	.L151:
 1673 001e 00BF     		.align	2
 1674              	.L150:
 1675 0020 00000000 		.word	.LANCHOR11
 1676              		.cfi_endproc
 1677              	.LFE18:
 1679              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1680              		.align	1
 1681              		.global	vTaskSuspendAll
 1682              		.syntax unified
 1683              		.thumb
 1684              		.thumb_func
 1685              		.fpu fpv4-sp-d16
 1687              	vTaskSuspendAll:
 1688              	.LFB19:
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 1689              		.loc 1 1945 0
 1690              		.cfi_startproc
 1691              		@ args = 0, pretend = 0, frame = 0
 1692              		@ frame_needed = 0, uses_anonymous_args = 0
 1693              		@ link register save eliminated.
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1694              		.loc 1 1950 0
 1695 0000 024A     		ldr	r2, .L153
 1696 0002 1368     		ldr	r3, [r2]
 1697 0004 0133     		adds	r3, r3, #1
 1698 0006 1360     		str	r3, [r2]
 1699 0008 7047     		bx	lr
 1700              	.L154:
 1701 000a 00BF     		.align	2
 1702              	.L153:
 1703 000c 00000000 		.word	.LANCHOR16
 1704              		.cfi_endproc
 1705              	.LFE19:
 1707              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1708              		.align	1
 1709              		.global	xTaskGetTickCount
 1710              		.syntax unified
 1711              		.thumb
 1712              		.thumb_func
 1713              		.fpu fpv4-sp-d16
 1715              	xTaskGetTickCount:
 1716              	.LFB21:
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 1717              		.loc 1 2128 0
 1718              		.cfi_startproc
 1719              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 122


 1720              		@ frame_needed = 0, uses_anonymous_args = 0
 1721              		@ link register save eliminated.
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1722              		.loc 1 2134 0
 1723 0000 014B     		ldr	r3, .L156
 1724 0002 1868     		ldr	r0, [r3]
 1725              	.LVL144:
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1726              		.loc 1 2139 0
 1727 0004 7047     		bx	lr
 1728              	.L157:
 1729 0006 00BF     		.align	2
 1730              	.L156:
 1731 0008 00000000 		.word	.LANCHOR14
 1732              		.cfi_endproc
 1733              	.LFE21:
 1735              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1736              		.align	1
 1737              		.global	xTaskGetTickCountFromISR
 1738              		.syntax unified
 1739              		.thumb
 1740              		.thumb_func
 1741              		.fpu fpv4-sp-d16
 1743              	xTaskGetTickCountFromISR:
 1744              	.LFB22:
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 1745              		.loc 1 2143 0
 1746              		.cfi_startproc
 1747              		@ args = 0, pretend = 0, frame = 0
 1748              		@ frame_needed = 0, uses_anonymous_args = 0
 1749 0000 08B5     		push	{r3, lr}
 1750              	.LCFI20:
 1751              		.cfi_def_cfa_offset 8
 1752              		.cfi_offset 3, -8
 1753              		.cfi_offset 14, -4
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1754              		.loc 1 2161 0
 1755 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1756              	.LVL145:
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1757              		.loc 1 2165 0
 1758 0006 014B     		ldr	r3, .L160
 1759 0008 1868     		ldr	r0, [r3]
 1760              	.LVL146:
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1761              		.loc 1 2170 0
 1762 000a 08BD     		pop	{r3, pc}
 1763              	.L161:
 1764              		.align	2
 1765              	.L160:
 1766 000c 00000000 		.word	.LANCHOR14
 1767              		.cfi_endproc
 1768              	.LFE22:
 1770              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1771              		.align	1
 1772              		.global	uxTaskGetNumberOfTasks
 1773              		.syntax unified
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 123


 1774              		.thumb
 1775              		.thumb_func
 1776              		.fpu fpv4-sp-d16
 1778              	uxTaskGetNumberOfTasks:
 1779              	.LFB23:
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 1780              		.loc 1 2174 0
 1781              		.cfi_startproc
 1782              		@ args = 0, pretend = 0, frame = 0
 1783              		@ frame_needed = 0, uses_anonymous_args = 0
 1784              		@ link register save eliminated.
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1785              		.loc 1 2177 0
 1786 0000 014B     		ldr	r3, .L163
 1787 0002 1868     		ldr	r0, [r3]
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1788              		.loc 1 2178 0
 1789 0004 7047     		bx	lr
 1790              	.L164:
 1791 0006 00BF     		.align	2
 1792              	.L163:
 1793 0008 00000000 		.word	.LANCHOR9
 1794              		.cfi_endproc
 1795              	.LFE23:
 1797              		.section	.text.pcTaskGetName,"ax",%progbits
 1798              		.align	1
 1799              		.global	pcTaskGetName
 1800              		.syntax unified
 1801              		.thumb
 1802              		.thumb_func
 1803              		.fpu fpv4-sp-d16
 1805              	pcTaskGetName:
 1806              	.LFB24:
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 1807              		.loc 1 2182 0
 1808              		.cfi_startproc
 1809              		@ args = 0, pretend = 0, frame = 0
 1810              		@ frame_needed = 0, uses_anonymous_args = 0
 1811              		@ link register save eliminated.
 1812              	.LVL147:
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 1813              		.loc 1 2187 0
 1814 0000 10B1     		cbz	r0, .L170
 1815              	.LVL148:
 1816              	.L166:
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 1817              		.loc 1 2188 0 discriminator 4
 1818 0002 20B1     		cbz	r0, .L171
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1819              		.loc 1 2190 0
 1820 0004 3430     		adds	r0, r0, #52
 1821              	.LVL149:
 1822 0006 7047     		bx	lr
 1823              	.LVL150:
 1824              	.L170:
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 1825              		.loc 1 2187 0 discriminator 1
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 124


 1826 0008 054B     		ldr	r3, .L172
 1827 000a 1868     		ldr	r0, [r3]
 1828              	.LVL151:
 1829 000c F9E7     		b	.L166
 1830              	.LVL152:
 1831              	.L171:
 1832              	.LBB116:
 1833              	.LBB117:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1834              		.loc 2 237 0
 1835              		.syntax unified
 1836              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1837 000e 4FF05003 			mov r3, #80												
 1838 0012 83F31188 		msr basepri, r3											
 1839 0016 BFF36F8F 		isb														
 1840 001a BFF34F8F 		dsb														
 1841              	
 1842              	@ 0 "" 2
 1843              	.LVL153:
 1844              		.thumb
 1845              		.syntax unified
 1846              	.L168:
 1847 001e FEE7     		b	.L168
 1848              	.L173:
 1849              		.align	2
 1850              	.L172:
 1851 0020 00000000 		.word	.LANCHOR10
 1852              	.LBE117:
 1853              	.LBE116:
 1854              		.cfi_endproc
 1855              	.LFE24:
 1857              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1858              		.align	1
 1859              		.global	xTaskIncrementTick
 1860              		.syntax unified
 1861              		.thumb
 1862              		.thumb_func
 1863              		.fpu fpv4-sp-d16
 1865              	xTaskIncrementTick:
 1866              	.LFB25:
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 1867              		.loc 1 2500 0
 1868              		.cfi_startproc
 1869              		@ args = 0, pretend = 0, frame = 0
 1870              		@ frame_needed = 0, uses_anonymous_args = 0
 1871 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1872              	.LCFI21:
 1873              		.cfi_def_cfa_offset 24
 1874              		.cfi_offset 3, -24
 1875              		.cfi_offset 4, -20
 1876              		.cfi_offset 5, -16
 1877              		.cfi_offset 6, -12
 1878              		.cfi_offset 7, -8
 1879              		.cfi_offset 14, -4
 1880              	.LVL154:
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1881              		.loc 1 2509 0
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 125


 1882 0002 3C4B     		ldr	r3, .L198
 1883 0004 1B68     		ldr	r3, [r3]
 1884 0006 002B     		cmp	r3, #0
 1885 0008 68D1     		bne	.L175
 1886              	.LBB118:
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1887              		.loc 1 2513 0
 1888 000a 3B4B     		ldr	r3, .L198+4
 1889 000c 1D68     		ldr	r5, [r3]
 1890 000e 0135     		adds	r5, r5, #1
 1891              	.LVL155:
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1892              		.loc 1 2517 0
 1893 0010 1D60     		str	r5, [r3]
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1894              		.loc 1 2519 0
 1895 0012 C5B9     		cbnz	r5, .L176
 1896              	.LBB119:
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1897              		.loc 1 2521 0
 1898 0014 394B     		ldr	r3, .L198+8
 1899 0016 1B68     		ldr	r3, [r3]
 1900 0018 1B68     		ldr	r3, [r3]
 1901 001a 43B1     		cbz	r3, .L177
 1902              	.LBB120:
 1903              	.LBB121:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1904              		.loc 2 237 0
 1905              		.syntax unified
 1906              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1907 001c 4FF05003 			mov r3, #80												
 1908 0020 83F31188 		msr basepri, r3											
 1909 0024 BFF36F8F 		isb														
 1910 0028 BFF34F8F 		dsb														
 1911              	
 1912              	@ 0 "" 2
 1913              	.LVL156:
 1914              		.thumb
 1915              		.syntax unified
 1916              	.L178:
 1917 002c FEE7     		b	.L178
 1918              	.L177:
 1919              	.LBE121:
 1920              	.LBE120:
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1921              		.loc 1 2521 0 discriminator 2
 1922 002e 334A     		ldr	r2, .L198+8
 1923 0030 1168     		ldr	r1, [r2]
 1924              	.LVL157:
 1925 0032 334B     		ldr	r3, .L198+12
 1926 0034 1868     		ldr	r0, [r3]
 1927 0036 1060     		str	r0, [r2]
 1928 0038 1960     		str	r1, [r3]
 1929 003a 324A     		ldr	r2, .L198+16
 1930 003c 1368     		ldr	r3, [r2]
 1931 003e 0133     		adds	r3, r3, #1
 1932 0040 1360     		str	r3, [r2]
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 126


 1933 0042 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1934              	.LVL158:
 1935              	.L176:
 1936              	.LBE119:
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1937              		.loc 1 2532 0
 1938 0046 304B     		ldr	r3, .L198+20
 1939 0048 1B68     		ldr	r3, [r3]
 1940 004a 9D42     		cmp	r5, r3
 1941 004c 3AD2     		bcs	.L189
 1942              	.LBE118:
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1943              		.loc 1 2503 0
 1944 004e 0024     		movs	r4, #0
 1945              	.LVL159:
 1946              	.L180:
 1947              	.LBB122:
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1948              		.loc 1 2615 0
 1949 0050 2E4B     		ldr	r3, .L198+24
 1950 0052 1B68     		ldr	r3, [r3]
 1951 0054 DB6A     		ldr	r3, [r3, #44]
 1952 0056 03EB8303 		add	r3, r3, r3, lsl #2
 1953 005a 9A00     		lsls	r2, r3, #2
 1954 005c 2C4B     		ldr	r3, .L198+28
 1955 005e 9B58     		ldr	r3, [r3, r2]
 1956 0060 012B     		cmp	r3, #1
 1957 0062 40D9     		bls	.L187
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1958              		.loc 1 2617 0
 1959 0064 0124     		movs	r4, #1
 1960              	.LVL160:
 1961 0066 3EE0     		b	.L187
 1962              	.LVL161:
 1963              	.L191:
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1964              		.loc 1 2598 0
 1965 0068 0124     		movs	r4, #1
 1966              	.LVL162:
 1967              	.L179:
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1968              		.loc 1 2536 0
 1969 006a 244B     		ldr	r3, .L198+8
 1970 006c 1B68     		ldr	r3, [r3]
 1971 006e 1B68     		ldr	r3, [r3]
 1972 0070 53B3     		cbz	r3, .L195
 1973 0072 0023     		movs	r3, #0
 1974              	.L181:
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1975              		.loc 1 2536 0 is_stmt 0 discriminator 4
 1976 0074 53BB     		cbnz	r3, .L196
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 1977              		.loc 1 2552 0 is_stmt 1
 1978 0076 214B     		ldr	r3, .L198+8
 1979 0078 1B68     		ldr	r3, [r3]
 1980 007a DB68     		ldr	r3, [r3, #12]
 1981 007c DE68     		ldr	r6, [r3, #12]
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 127


 1982              	.LVL163:
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1983              		.loc 1 2553 0
 1984 007e 7368     		ldr	r3, [r6, #4]
 1985              	.LVL164:
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1986              		.loc 1 2555 0
 1987 0080 9D42     		cmp	r5, r3
 1988 0082 28D3     		bcc	.L197
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1989              		.loc 1 2571 0
 1990 0084 371D     		adds	r7, r6, #4
 1991 0086 3846     		mov	r0, r7
 1992 0088 FFF7FEFF 		bl	uxListRemove
 1993              	.LVL165:
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1994              		.loc 1 2575 0
 1995 008c B36A     		ldr	r3, [r6, #40]
 1996 008e 1BB1     		cbz	r3, .L184
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1997              		.loc 1 2577 0
 1998 0090 06F11800 		add	r0, r6, #24
 1999 0094 FFF7FEFF 		bl	uxListRemove
 2000              	.LVL166:
 2001              	.L184:
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2002              		.loc 1 2586 0
 2003 0098 F36A     		ldr	r3, [r6, #44]
 2004 009a 0122     		movs	r2, #1
 2005 009c 9A40     		lsls	r2, r2, r3
 2006 009e 1D49     		ldr	r1, .L198+32
 2007 00a0 0868     		ldr	r0, [r1]
 2008 00a2 0243     		orrs	r2, r2, r0
 2009 00a4 0A60     		str	r2, [r1]
 2010 00a6 03EB8303 		add	r3, r3, r3, lsl #2
 2011 00aa 9A00     		lsls	r2, r3, #2
 2012 00ac 3946     		mov	r1, r7
 2013 00ae 1848     		ldr	r0, .L198+28
 2014 00b0 1044     		add	r0, r0, r2
 2015 00b2 FFF7FEFF 		bl	vListInsertEnd
 2016              	.LVL167:
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 2017              		.loc 1 2596 0
 2018 00b6 F26A     		ldr	r2, [r6, #44]
 2019 00b8 144B     		ldr	r3, .L198+24
 2020 00ba 1B68     		ldr	r3, [r3]
 2021 00bc DB6A     		ldr	r3, [r3, #44]
 2022 00be 9A42     		cmp	r2, r3
 2023 00c0 D2D2     		bcs	.L191
 2024 00c2 D2E7     		b	.L179
 2025              	.LVL168:
 2026              	.L189:
 2027 00c4 0024     		movs	r4, #0
 2028 00c6 D0E7     		b	.L179
 2029              	.LVL169:
 2030              	.L195:
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 128


 2031              		.loc 1 2536 0
 2032 00c8 0123     		movs	r3, #1
 2033 00ca D3E7     		b	.L181
 2034              	.L196:
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 2035              		.loc 1 2543 0
 2036 00cc 4FF0FF32 		mov	r2, #-1
 2037 00d0 0D4B     		ldr	r3, .L198+20
 2038 00d2 1A60     		str	r2, [r3]
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2039              		.loc 1 2544 0
 2040 00d4 BCE7     		b	.L180
 2041              	.LVL170:
 2042              	.L197:
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
 2043              		.loc 1 2562 0
 2044 00d6 0C4A     		ldr	r2, .L198+20
 2045 00d8 1360     		str	r3, [r2]
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2046              		.loc 1 2563 0
 2047 00da B9E7     		b	.L180
 2048              	.LVL171:
 2049              	.L175:
 2050              	.LBE122:
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2051              		.loc 1 2643 0
 2052 00dc 0E4A     		ldr	r2, .L198+36
 2053 00de 1368     		ldr	r3, [r2]
 2054 00e0 0133     		adds	r3, r3, #1
 2055 00e2 1360     		str	r3, [r2]
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2056              		.loc 1 2503 0
 2057 00e4 0024     		movs	r4, #0
 2058              	.LVL172:
 2059              	.L187:
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2060              		.loc 1 2656 0
 2061 00e6 0D4B     		ldr	r3, .L198+40
 2062 00e8 1B68     		ldr	r3, [r3]
 2063 00ea 03B1     		cbz	r3, .L174
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2064              		.loc 1 2658 0
 2065 00ec 0124     		movs	r4, #1
 2066              	.LVL173:
 2067              	.L174:
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2068              		.loc 1 2668 0
 2069 00ee 2046     		mov	r0, r4
 2070 00f0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2071              	.L199:
 2072 00f2 00BF     		.align	2
 2073              	.L198:
 2074 00f4 00000000 		.word	.LANCHOR16
 2075 00f8 00000000 		.word	.LANCHOR14
 2076 00fc 00000000 		.word	.LANCHOR2
 2077 0100 00000000 		.word	.LANCHOR8
 2078 0104 00000000 		.word	.LANCHOR18
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 129


 2079 0108 00000000 		.word	.LANCHOR3
 2080 010c 00000000 		.word	.LANCHOR10
 2081 0110 00000000 		.word	.LANCHOR4
 2082 0114 00000000 		.word	.LANCHOR13
 2083 0118 00000000 		.word	.LANCHOR19
 2084 011c 00000000 		.word	.LANCHOR20
 2085              		.cfi_endproc
 2086              	.LFE25:
 2088              		.section	.text.xTaskResumeAll,"ax",%progbits
 2089              		.align	1
 2090              		.global	xTaskResumeAll
 2091              		.syntax unified
 2092              		.thumb
 2093              		.thumb_func
 2094              		.fpu fpv4-sp-d16
 2096              	xTaskResumeAll:
 2097              	.LFB20:
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2098              		.loc 1 2018 0
 2099              		.cfi_startproc
 2100              		@ args = 0, pretend = 0, frame = 0
 2101              		@ frame_needed = 0, uses_anonymous_args = 0
 2102 0000 38B5     		push	{r3, r4, r5, lr}
 2103              	.LCFI22:
 2104              		.cfi_def_cfa_offset 16
 2105              		.cfi_offset 3, -16
 2106              		.cfi_offset 4, -12
 2107              		.cfi_offset 5, -8
 2108              		.cfi_offset 14, -4
 2109              	.LVL174:
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2110              		.loc 1 2024 0
 2111 0002 354B     		ldr	r3, .L217
 2112 0004 1B68     		ldr	r3, [r3]
 2113 0006 43B9     		cbnz	r3, .L201
 2114              	.LBB123:
 2115              	.LBB124:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2116              		.loc 2 237 0
 2117              		.syntax unified
 2118              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2119 0008 4FF05003 			mov r3, #80												
 2120 000c 83F31188 		msr basepri, r3											
 2121 0010 BFF36F8F 		isb														
 2122 0014 BFF34F8F 		dsb														
 2123              	
 2124              	@ 0 "" 2
 2125              	.LVL175:
 2126              		.thumb
 2127              		.syntax unified
 2128              	.L202:
 2129 0018 FEE7     		b	.L202
 2130              	.L201:
 2131              	.LBE124:
 2132              	.LBE123:
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2133              		.loc 1 2031 0
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 130


 2134 001a FFF7FEFF 		bl	vPortEnterCritical
 2135              	.LVL176:
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2136              		.loc 1 2033 0
 2137 001e 2E4B     		ldr	r3, .L217
 2138 0020 1A68     		ldr	r2, [r3]
 2139 0022 013A     		subs	r2, r2, #1
 2140 0024 1A60     		str	r2, [r3]
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2141              		.loc 1 2035 0
 2142 0026 1B68     		ldr	r3, [r3]
 2143 0028 002B     		cmp	r3, #0
 2144 002a 50D1     		bne	.L211
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2145              		.loc 1 2037 0
 2146 002c 2B4B     		ldr	r3, .L217+4
 2147 002e 1B68     		ldr	r3, [r3]
 2148 0030 23B9     		cbnz	r3, .L212
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2149              		.loc 1 2020 0
 2150 0032 0024     		movs	r4, #0
 2151              	.LVL177:
 2152              	.L203:
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2153              		.loc 1 2121 0
 2154 0034 FFF7FEFF 		bl	vPortExitCritical
 2155              	.LVL178:
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2156              		.loc 1 2124 0
 2157 0038 2046     		mov	r0, r4
 2158 003a 38BD     		pop	{r3, r4, r5, pc}
 2159              	.LVL179:
 2160              	.L212:
 2161 003c 0024     		movs	r4, #0
 2162              	.LVL180:
 2163              	.L204:
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2164              		.loc 1 2041 0
 2165 003e 284B     		ldr	r3, .L217+8
 2166 0040 1B68     		ldr	r3, [r3]
 2167 0042 1BB3     		cbz	r3, .L215
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2168              		.loc 1 2043 0
 2169 0044 264B     		ldr	r3, .L217+8
 2170 0046 DB68     		ldr	r3, [r3, #12]
 2171 0048 DC68     		ldr	r4, [r3, #12]
 2172              	.LVL181:
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2173              		.loc 1 2044 0
 2174 004a 04F11800 		add	r0, r4, #24
 2175 004e FFF7FEFF 		bl	uxListRemove
 2176              	.LVL182:
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2177              		.loc 1 2045 0
 2178 0052 251D     		adds	r5, r4, #4
 2179 0054 2846     		mov	r0, r5
 2180 0056 FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 131


 2181              	.LVL183:
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2182              		.loc 1 2046 0
 2183 005a E36A     		ldr	r3, [r4, #44]
 2184 005c 0122     		movs	r2, #1
 2185 005e 9A40     		lsls	r2, r2, r3
 2186 0060 2049     		ldr	r1, .L217+12
 2187 0062 0868     		ldr	r0, [r1]
 2188 0064 0243     		orrs	r2, r2, r0
 2189 0066 0A60     		str	r2, [r1]
 2190 0068 03EB8303 		add	r3, r3, r3, lsl #2
 2191 006c 9A00     		lsls	r2, r3, #2
 2192 006e 2946     		mov	r1, r5
 2193 0070 1D48     		ldr	r0, .L217+16
 2194 0072 1044     		add	r0, r0, r2
 2195 0074 FFF7FEFF 		bl	vListInsertEnd
 2196              	.LVL184:
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2197              		.loc 1 2050 0
 2198 0078 E26A     		ldr	r2, [r4, #44]
 2199 007a 1C4B     		ldr	r3, .L217+20
 2200 007c 1B68     		ldr	r3, [r3]
 2201 007e DB6A     		ldr	r3, [r3, #44]
 2202 0080 9A42     		cmp	r2, r3
 2203 0082 DCD3     		bcc	.L204
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2204              		.loc 1 2052 0
 2205 0084 0122     		movs	r2, #1
 2206 0086 1A4B     		ldr	r3, .L217+24
 2207 0088 1A60     		str	r2, [r3]
 2208 008a D8E7     		b	.L204
 2209              	.L215:
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2210              		.loc 1 2060 0
 2211 008c 0CB1     		cbz	r4, .L207
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2212              		.loc 1 2068 0
 2213 008e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2214              	.LVL185:
 2215              	.L207:
 2216              	.LBB125:
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2217              		.loc 1 2076 0
 2218 0092 184B     		ldr	r3, .L217+28
 2219 0094 1C68     		ldr	r4, [r3]
 2220              	.LVL186:
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2221              		.loc 1 2078 0
 2222 0096 74B9     		cbnz	r4, .L210
 2223              	.L208:
 2224              	.LBE125:
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2225              		.loc 1 2101 0
 2226 0098 154B     		ldr	r3, .L217+24
 2227 009a 1B68     		ldr	r3, [r3]
 2228 009c CBB1     		cbz	r3, .L213
 2229              	.LVL187:
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 132


2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2230              		.loc 1 2108 0
 2231 009e 4FF08052 		mov	r2, #268435456
 2232 00a2 154B     		ldr	r3, .L217+32
 2233 00a4 1A60     		str	r2, [r3]
 2234              		.syntax unified
 2235              	@ 2108 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2236 00a6 BFF34F8F 		dsb
 2237              	@ 0 "" 2
 2238              	@ 2108 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2239 00aa BFF36F8F 		isb
 2240              	@ 0 "" 2
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2241              		.loc 1 2105 0
 2242              		.thumb
 2243              		.syntax unified
 2244 00ae 0124     		movs	r4, #1
 2245              	.LVL188:
 2246 00b0 C0E7     		b	.L203
 2247              	.LVL189:
 2248              	.L209:
 2249              	.LBB126:
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2250              		.loc 1 2091 0
 2251 00b2 013C     		subs	r4, r4, #1
 2252              	.LVL190:
 2253 00b4 07D0     		beq	.L216
 2254              	.L210:
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 2255              		.loc 1 2082 0
 2256 00b6 FFF7FEFF 		bl	xTaskIncrementTick
 2257              	.LVL191:
 2258 00ba 0028     		cmp	r0, #0
 2259 00bc F9D0     		beq	.L209
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2260              		.loc 1 2084 0
 2261 00be 0122     		movs	r2, #1
 2262 00c0 0B4B     		ldr	r3, .L217+24
 2263 00c2 1A60     		str	r2, [r3]
 2264 00c4 F5E7     		b	.L209
 2265              	.L216:
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2266              		.loc 1 2093 0
 2267 00c6 0022     		movs	r2, #0
 2268 00c8 0A4B     		ldr	r3, .L217+28
 2269 00ca 1A60     		str	r2, [r3]
 2270 00cc E4E7     		b	.L208
 2271              	.LVL192:
 2272              	.L211:
 2273              	.LBE126:
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2274              		.loc 1 2020 0
 2275 00ce 0024     		movs	r4, #0
 2276 00d0 B0E7     		b	.L203
 2277              	.LVL193:
 2278              	.L213:
 2279 00d2 0024     		movs	r4, #0
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 133


 2280              	.LVL194:
 2281 00d4 AEE7     		b	.L203
 2282              	.L218:
 2283 00d6 00BF     		.align	2
 2284              	.L217:
 2285 00d8 00000000 		.word	.LANCHOR16
 2286 00dc 00000000 		.word	.LANCHOR9
 2287 00e0 00000000 		.word	.LANCHOR1
 2288 00e4 00000000 		.word	.LANCHOR13
 2289 00e8 00000000 		.word	.LANCHOR4
 2290 00ec 00000000 		.word	.LANCHOR10
 2291 00f0 00000000 		.word	.LANCHOR20
 2292 00f4 00000000 		.word	.LANCHOR19
 2293 00f8 04ED00E0 		.word	-536810236
 2294              		.cfi_endproc
 2295              	.LFE20:
 2297              		.section	.text.vTaskDelay,"ax",%progbits
 2298              		.align	1
 2299              		.global	vTaskDelay
 2300              		.syntax unified
 2301              		.thumb
 2302              		.thumb_func
 2303              		.fpu fpv4-sp-d16
 2305              	vTaskDelay:
 2306              	.LFB9:
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2307              		.loc 1 1225 0
 2308              		.cfi_startproc
 2309              		@ args = 0, pretend = 0, frame = 0
 2310              		@ frame_needed = 0, uses_anonymous_args = 0
 2311              	.LVL195:
 2312 0000 10B5     		push	{r4, lr}
 2313              	.LCFI23:
 2314              		.cfi_def_cfa_offset 8
 2315              		.cfi_offset 4, -8
 2316              		.cfi_offset 14, -4
 2317              	.LVL196:
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2318              		.loc 1 1229 0
 2319 0002 A8B1     		cbz	r0, .L224
 2320 0004 0446     		mov	r4, r0
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2321              		.loc 1 1231 0
 2322 0006 104B     		ldr	r3, .L226
 2323 0008 1B68     		ldr	r3, [r3]
 2324 000a 43B1     		cbz	r3, .L221
 2325              	.LBB127:
 2326              	.LBB128:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2327              		.loc 2 237 0
 2328              		.syntax unified
 2329              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2330 000c 4FF05003 			mov r3, #80												
 2331 0010 83F31188 		msr basepri, r3											
 2332 0014 BFF36F8F 		isb														
 2333 0018 BFF34F8F 		dsb														
 2334              	
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 134


 2335              	@ 0 "" 2
 2336              	.LVL197:
 2337              		.thumb
 2338              		.syntax unified
 2339              	.L222:
 2340 001c FEE7     		b	.L222
 2341              	.L221:
 2342              	.LBE128:
 2343              	.LBE127:
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2344              		.loc 1 1232 0
 2345 001e FFF7FEFF 		bl	vTaskSuspendAll
 2346              	.LVL198:
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2347              		.loc 1 1243 0
 2348 0022 0021     		movs	r1, #0
 2349 0024 2046     		mov	r0, r4
 2350 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2351              	.LVL199:
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2352              		.loc 1 1245 0
 2353 002a FFF7FEFF 		bl	xTaskResumeAll
 2354              	.LVL200:
 2355 002e 00E0     		b	.L220
 2356              	.LVL201:
 2357              	.L224:
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2358              		.loc 1 1226 0
 2359 0030 0020     		movs	r0, #0
 2360              	.LVL202:
 2361              	.L220:
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2362              		.loc 1 1254 0
 2363 0032 38B9     		cbnz	r0, .L219
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2364              		.loc 1 1256 0
 2365 0034 4FF08052 		mov	r2, #268435456
 2366 0038 044B     		ldr	r3, .L226+4
 2367 003a 1A60     		str	r2, [r3]
 2368              		.syntax unified
 2369              	@ 1256 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2370 003c BFF34F8F 		dsb
 2371              	@ 0 "" 2
 2372              	@ 1256 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2373 0040 BFF36F8F 		isb
 2374              	@ 0 "" 2
 2375              		.thumb
 2376              		.syntax unified
 2377              	.L219:
 2378 0044 10BD     		pop	{r4, pc}
 2379              	.L227:
 2380 0046 00BF     		.align	2
 2381              	.L226:
 2382 0048 00000000 		.word	.LANCHOR16
 2383 004c 04ED00E0 		.word	-536810236
 2384              		.cfi_endproc
 2385              	.LFE9:
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 135


 2387              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 2388              		.align	1
 2389              		.syntax unified
 2390              		.thumb
 2391              		.thumb_func
 2392              		.fpu fpv4-sp-d16
 2394              	prvCheckTasksWaitingTermination:
 2395              	.LFB36:
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2396              		.loc 1 3366 0
 2397              		.cfi_startproc
 2398              		@ args = 0, pretend = 0, frame = 0
 2399              		@ frame_needed = 0, uses_anonymous_args = 0
 2400              	.LBB129:
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2401              		.loc 1 3376 0
 2402 0000 134B     		ldr	r3, .L237
 2403 0002 1B68     		ldr	r3, [r3]
 2404 0004 13B3     		cbz	r3, .L235
 2405              	.LBE129:
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2406              		.loc 1 3366 0
 2407 0006 10B5     		push	{r4, lr}
 2408              	.LCFI24:
 2409              		.cfi_def_cfa_offset 8
 2410              		.cfi_offset 4, -8
 2411              		.cfi_offset 14, -4
 2412              	.L231:
 2413              	.LBB131:
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2414              		.loc 1 3378 0
 2415 0008 FFF7FEFF 		bl	vTaskSuspendAll
 2416              	.LVL203:
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2417              		.loc 1 3380 0
 2418 000c 114B     		ldr	r3, .L237+4
 2419 000e 1C68     		ldr	r4, [r3]
 2420              	.LVL204:
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2421              		.loc 1 3382 0
 2422 0010 FFF7FEFF 		bl	xTaskResumeAll
 2423              	.LVL205:
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2424              		.loc 1 3384 0
 2425 0014 24B9     		cbnz	r4, .L236
 2426              	.LVL206:
 2427              	.L230:
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2428              		.loc 1 3376 0
 2429 0016 0E4B     		ldr	r3, .L237
 2430 0018 1B68     		ldr	r3, [r3]
 2431 001a 002B     		cmp	r3, #0
 2432 001c F4D1     		bne	.L231
 2433              	.LBE131:
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2434              		.loc 1 3406 0
 2435 001e 10BD     		pop	{r4, pc}
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 136


 2436              	.LVL207:
 2437              	.L236:
 2438              	.LBB132:
 2439              	.LBB130:
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2440              		.loc 1 3388 0
 2441 0020 FFF7FEFF 		bl	vPortEnterCritical
 2442              	.LVL208:
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2443              		.loc 1 3390 0
 2444 0024 0B4B     		ldr	r3, .L237+4
 2445 0026 DB68     		ldr	r3, [r3, #12]
 2446 0028 DC68     		ldr	r4, [r3, #12]
 2447              	.LVL209:
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
 2448              		.loc 1 3391 0
 2449 002a 201D     		adds	r0, r4, #4
 2450 002c FFF7FEFF 		bl	uxListRemove
 2451              	.LVL210:
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
 2452              		.loc 1 3392 0
 2453 0030 094A     		ldr	r2, .L237+8
 2454 0032 1368     		ldr	r3, [r2]
 2455 0034 013B     		subs	r3, r3, #1
 2456 0036 1360     		str	r3, [r2]
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2457              		.loc 1 3393 0
 2458 0038 054A     		ldr	r2, .L237
 2459 003a 1368     		ldr	r3, [r2]
 2460 003c 013B     		subs	r3, r3, #1
 2461 003e 1360     		str	r3, [r2]
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2462              		.loc 1 3395 0
 2463 0040 FFF7FEFF 		bl	vPortExitCritical
 2464              	.LVL211:
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2465              		.loc 1 3397 0
 2466 0044 2046     		mov	r0, r4
 2467 0046 FFF7FEFF 		bl	prvDeleteTCB
 2468              	.LVL212:
 2469              	.LBE130:
 2470 004a E4E7     		b	.L230
 2471              	.LVL213:
 2472              	.L235:
 2473              	.LCFI25:
 2474              		.cfi_def_cfa_offset 0
 2475              		.cfi_restore 4
 2476              		.cfi_restore 14
 2477 004c 7047     		bx	lr
 2478              	.L238:
 2479 004e 00BF     		.align	2
 2480              	.L237:
 2481 0050 00000000 		.word	.LANCHOR15
 2482 0054 00000000 		.word	.LANCHOR7
 2483 0058 00000000 		.word	.LANCHOR9
 2484              	.LBE132:
 2485              		.cfi_endproc
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 137


 2486              	.LFE36:
 2488              		.section	.text.prvIdleTask,"ax",%progbits
 2489              		.align	1
 2490              		.syntax unified
 2491              		.thumb
 2492              		.thumb_func
 2493              		.fpu fpv4-sp-d16
 2495              	prvIdleTask:
 2496              	.LFB34:
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 2497              		.loc 1 3132 0
 2498              		.cfi_startproc
 2499              		@ Volatile: function does not return.
 2500              		@ args = 0, pretend = 0, frame = 0
 2501              		@ frame_needed = 0, uses_anonymous_args = 0
 2502              	.LVL214:
 2503 0000 08B5     		push	{r3, lr}
 2504              	.LCFI26:
 2505              		.cfi_def_cfa_offset 8
 2506              		.cfi_offset 3, -8
 2507              		.cfi_offset 14, -4
 2508              	.LVL215:
 2509              	.L240:
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2510              		.loc 1 3143 0
 2511 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 2512              	.LVL216:
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2513              		.loc 1 3166 0
 2514 0006 064B     		ldr	r3, .L243
 2515 0008 1B68     		ldr	r3, [r3]
 2516 000a 012B     		cmp	r3, #1
 2517 000c F9D9     		bls	.L240
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2518              		.loc 1 3168 0
 2519 000e 4FF08052 		mov	r2, #268435456
 2520 0012 044B     		ldr	r3, .L243+4
 2521 0014 1A60     		str	r2, [r3]
 2522              		.syntax unified
 2523              	@ 3168 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2524 0016 BFF34F8F 		dsb
 2525              	@ 0 "" 2
 2526              	@ 3168 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2527 001a BFF36F8F 		isb
 2528              	@ 0 "" 2
 2529              		.thumb
 2530              		.syntax unified
 2531 001e F0E7     		b	.L240
 2532              	.L244:
 2533              		.align	2
 2534              	.L243:
 2535 0020 00000000 		.word	.LANCHOR4
 2536 0024 04ED00E0 		.word	-536810236
 2537              		.cfi_endproc
 2538              	.LFE34:
 2540              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2541              		.align	1
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 138


 2542              		.global	vTaskSwitchContext
 2543              		.syntax unified
 2544              		.thumb
 2545              		.thumb_func
 2546              		.fpu fpv4-sp-d16
 2548              	vTaskSwitchContext:
 2549              	.LFB26:
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2550              		.loc 1 2762 0
 2551              		.cfi_startproc
 2552              		@ args = 0, pretend = 0, frame = 0
 2553              		@ frame_needed = 0, uses_anonymous_args = 0
 2554              		@ link register save eliminated.
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2555              		.loc 1 2763 0
 2556 0000 214B     		ldr	r3, .L256
 2557 0002 1B68     		ldr	r3, [r3]
 2558 0004 C3B9     		cbnz	r3, .L254
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2559              		.loc 1 2771 0
 2560 0006 0022     		movs	r2, #0
 2561 0008 204B     		ldr	r3, .L256+4
 2562 000a 1A60     		str	r2, [r3]
 2563              	.LBB133:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2564              		.loc 1 2806 0
 2565 000c 204B     		ldr	r3, .L256+8
 2566 000e 1B68     		ldr	r3, [r3]
 2567              	.LVL217:
 2568              	.LBB134:
 2569              	.LBB135:
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 2570              		.loc 2 176 0
 2571              		.syntax unified
 2572              	@ 176 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2573 0010 B3FA83F3 		clz r3, r3
 2574              	@ 0 "" 2
 2575              	.LVL218:
 2576              		.thumb
 2577              		.syntax unified
 2578 0014 DBB2     		uxtb	r3, r3
 2579              	.LBE135:
 2580              	.LBE134:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2581              		.loc 1 2806 0
 2582 0016 C3F11F03 		rsb	r3, r3, #31
 2583              	.LVL219:
 2584 001a 03EB8301 		add	r1, r3, r3, lsl #2
 2585 001e 8A00     		lsls	r2, r1, #2
 2586 0020 1C49     		ldr	r1, .L256+12
 2587 0022 8A58     		ldr	r2, [r1, r2]
 2588 0024 62B9     		cbnz	r2, .L248
 2589              	.LBB136:
 2590              	.LBB137:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2591              		.loc 2 237 0
 2592              		.syntax unified
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 139


 2593              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2594 0026 4FF05003 			mov r3, #80												
 2595 002a 83F31188 		msr basepri, r3											
 2596 002e BFF36F8F 		isb														
 2597 0032 BFF34F8F 		dsb														
 2598              	
 2599              	@ 0 "" 2
 2600              	.LVL220:
 2601              		.thumb
 2602              		.syntax unified
 2603              	.L249:
 2604 0036 FEE7     		b	.L249
 2605              	.L254:
 2606              	.LBE137:
 2607              	.LBE136:
 2608              	.LBE133:
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2609              		.loc 1 2767 0
 2610 0038 0122     		movs	r2, #1
 2611 003a 144B     		ldr	r3, .L256+4
 2612 003c 1A60     		str	r2, [r3]
 2613 003e 7047     		bx	lr
 2614              	.LVL221:
 2615              	.L248:
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2616              		.loc 1 2762 0 discriminator 2
 2617 0040 10B4     		push	{r4}
 2618              	.LCFI27:
 2619              		.cfi_def_cfa_offset 4
 2620              		.cfi_offset 4, -4
 2621              	.LVL222:
 2622              	.LBB140:
 2623              	.LBB138:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2624              		.loc 1 2806 0 discriminator 2
 2625 0042 1448     		ldr	r0, .L256+12
 2626 0044 9A00     		lsls	r2, r3, #2
 2627 0046 D418     		adds	r4, r2, r3
 2628 0048 A100     		lsls	r1, r4, #2
 2629 004a 0144     		add	r1, r1, r0
 2630 004c 4C68     		ldr	r4, [r1, #4]
 2631 004e 6468     		ldr	r4, [r4, #4]
 2632 0050 4C60     		str	r4, [r1, #4]
 2633 0052 1A44     		add	r2, r2, r3
 2634 0054 9100     		lsls	r1, r2, #2
 2635 0056 0831     		adds	r1, r1, #8
 2636 0058 0844     		add	r0, r0, r1
 2637 005a 8442     		cmp	r4, r0
 2638 005c 0BD0     		beq	.L255
 2639              	.L250:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2640              		.loc 1 2806 0 is_stmt 0 discriminator 5
 2641 005e 03EB8303 		add	r3, r3, r3, lsl #2
 2642              	.LVL223:
 2643 0062 9A00     		lsls	r2, r3, #2
 2644 0064 0B4B     		ldr	r3, .L256+12
 2645 0066 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 140


 2646 0068 5B68     		ldr	r3, [r3, #4]
 2647 006a DA68     		ldr	r2, [r3, #12]
 2648 006c 0A4B     		ldr	r3, .L256+16
 2649 006e 1A60     		str	r2, [r3]
 2650              	.LBE138:
 2651              	.LBE140:
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2652              		.loc 1 2817 0 is_stmt 1 discriminator 5
 2653 0070 5DF8044B 		ldr	r4, [sp], #4
 2654              	.LCFI28:
 2655              		.cfi_remember_state
 2656              		.cfi_restore 4
 2657              		.cfi_def_cfa_offset 0
 2658 0074 7047     		bx	lr
 2659              	.LVL224:
 2660              	.L255:
 2661              	.LCFI29:
 2662              		.cfi_restore_state
 2663              	.LBB141:
 2664              	.LBB139:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2665              		.loc 1 2806 0 discriminator 3
 2666 0076 6068     		ldr	r0, [r4, #4]
 2667 0078 03EB8302 		add	r2, r3, r3, lsl #2
 2668 007c 9100     		lsls	r1, r2, #2
 2669 007e 054A     		ldr	r2, .L256+12
 2670 0080 0A44     		add	r2, r2, r1
 2671 0082 5060     		str	r0, [r2, #4]
 2672 0084 EBE7     		b	.L250
 2673              	.L257:
 2674 0086 00BF     		.align	2
 2675              	.L256:
 2676 0088 00000000 		.word	.LANCHOR16
 2677 008c 00000000 		.word	.LANCHOR20
 2678 0090 00000000 		.word	.LANCHOR13
 2679 0094 00000000 		.word	.LANCHOR4
 2680 0098 00000000 		.word	.LANCHOR10
 2681              	.LBE139:
 2682              	.LBE141:
 2683              		.cfi_endproc
 2684              	.LFE26:
 2686              		.section	.text.vTaskSuspend,"ax",%progbits
 2687              		.align	1
 2688              		.global	vTaskSuspend
 2689              		.syntax unified
 2690              		.thumb
 2691              		.thumb_func
 2692              		.fpu fpv4-sp-d16
 2694              	vTaskSuspend:
 2695              	.LFB13:
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 2696              		.loc 1 1567 0
 2697              		.cfi_startproc
 2698              		@ args = 0, pretend = 0, frame = 0
 2699              		@ frame_needed = 0, uses_anonymous_args = 0
 2700              	.LVL225:
 2701 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 141


 2702              	.LCFI30:
 2703              		.cfi_def_cfa_offset 16
 2704              		.cfi_offset 3, -16
 2705              		.cfi_offset 4, -12
 2706              		.cfi_offset 5, -8
 2707              		.cfi_offset 14, -4
 2708 0002 0446     		mov	r4, r0
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2709              		.loc 1 1570 0
 2710 0004 FFF7FEFF 		bl	vPortEnterCritical
 2711              	.LVL226:
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2712              		.loc 1 1574 0
 2713 0008 3CB3     		cbz	r4, .L270
 2714              	.LVL227:
 2715              	.L259:
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2716              		.loc 1 1580 0 discriminator 4
 2717 000a 251D     		adds	r5, r4, #4
 2718 000c 2846     		mov	r0, r5
 2719 000e FFF7FEFF 		bl	uxListRemove
 2720              	.LVL228:
 2721 0012 70B9     		cbnz	r0, .L260
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2722              		.loc 1 1582 0
 2723 0014 E26A     		ldr	r2, [r4, #44]
 2724 0016 02EB8201 		add	r1, r2, r2, lsl #2
 2725 001a 8B00     		lsls	r3, r1, #2
 2726 001c 2649     		ldr	r1, .L273
 2727 001e CB58     		ldr	r3, [r1, r3]
 2728 0020 3BB9     		cbnz	r3, .L260
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2729              		.loc 1 1582 0 is_stmt 0 discriminator 1
 2730 0022 0123     		movs	r3, #1
 2731 0024 03FA02F2 		lsl	r2, r3, r2
 2732 0028 2449     		ldr	r1, .L273+4
 2733 002a 0B68     		ldr	r3, [r1]
 2734 002c 23EA0203 		bic	r3, r3, r2
 2735 0030 0B60     		str	r3, [r1]
 2736              	.L260:
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2737              		.loc 1 1590 0 is_stmt 1
 2738 0032 A36A     		ldr	r3, [r4, #40]
 2739 0034 1BB1     		cbz	r3, .L261
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2740              		.loc 1 1592 0
 2741 0036 04F11800 		add	r0, r4, #24
 2742 003a FFF7FEFF 		bl	uxListRemove
 2743              	.LVL229:
 2744              	.L261:
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2745              		.loc 1 1599 0
 2746 003e 2946     		mov	r1, r5
 2747 0040 1F48     		ldr	r0, .L273+8
 2748 0042 FFF7FEFF 		bl	vListInsertEnd
 2749              	.LVL230:
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 142


 2750              		.loc 1 1601 0
 2751 0046 FFF7FEFF 		bl	vPortExitCritical
 2752              	.LVL231:
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2753              		.loc 1 1603 0
 2754 004a 1E4B     		ldr	r3, .L273+12
 2755 004c 1B68     		ldr	r3, [r3]
 2756 004e 3BB9     		cbnz	r3, .L271
 2757              	.L262:
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2758              		.loc 1 1618 0
 2759 0050 1D4B     		ldr	r3, .L273+16
 2760 0052 1B68     		ldr	r3, [r3]
 2761 0054 9C42     		cmp	r4, r3
 2762 0056 0AD0     		beq	.L272
 2763              	.L258:
 2764 0058 38BD     		pop	{r3, r4, r5, pc}
 2765              	.LVL232:
 2766              	.L270:
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2767              		.loc 1 1574 0 discriminator 1
 2768 005a 1B4B     		ldr	r3, .L273+16
 2769 005c 1C68     		ldr	r4, [r3]
 2770              	.LVL233:
 2771 005e D4E7     		b	.L259
 2772              	.LVL234:
 2773              	.L271:
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2774              		.loc 1 1607 0
 2775 0060 FFF7FEFF 		bl	vPortEnterCritical
 2776              	.LVL235:
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2777              		.loc 1 1609 0
 2778 0064 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2779              	.LVL236:
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2780              		.loc 1 1611 0
 2781 0068 FFF7FEFF 		bl	vPortExitCritical
 2782              	.LVL237:
 2783 006c F0E7     		b	.L262
 2784              	.L272:
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2785              		.loc 1 1620 0
 2786 006e 154B     		ldr	r3, .L273+12
 2787 0070 1B68     		ldr	r3, [r3]
 2788 0072 A3B1     		cbz	r3, .L264
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 2789              		.loc 1 1623 0
 2790 0074 154B     		ldr	r3, .L273+20
 2791 0076 1B68     		ldr	r3, [r3]
 2792 0078 43B1     		cbz	r3, .L265
 2793              	.LBB142:
 2794              	.LBB143:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2795              		.loc 2 237 0
 2796              		.syntax unified
 2797              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 143


 2798 007a 4FF05003 			mov r3, #80												
 2799 007e 83F31188 		msr basepri, r3											
 2800 0082 BFF36F8F 		isb														
 2801 0086 BFF34F8F 		dsb														
 2802              	
 2803              	@ 0 "" 2
 2804              	.LVL238:
 2805              		.thumb
 2806              		.syntax unified
 2807              	.L266:
 2808 008a FEE7     		b	.L266
 2809              	.L265:
 2810              	.LBE143:
 2811              	.LBE142:
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2812              		.loc 1 1624 0
 2813 008c 4FF08052 		mov	r2, #268435456
 2814 0090 0F4B     		ldr	r3, .L273+24
 2815 0092 1A60     		str	r2, [r3]
 2816              		.syntax unified
 2817              	@ 1624 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2818 0094 BFF34F8F 		dsb
 2819              	@ 0 "" 2
 2820              	@ 1624 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2821 0098 BFF36F8F 		isb
 2822              	@ 0 "" 2
 2823              		.thumb
 2824              		.syntax unified
 2825 009c 38BD     		pop	{r3, r4, r5, pc}
 2826              	.LVL239:
 2827              	.L264:
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2828              		.loc 1 1631 0
 2829 009e 084B     		ldr	r3, .L273+8
 2830 00a0 1A68     		ldr	r2, [r3]
 2831 00a2 0C4B     		ldr	r3, .L273+28
 2832 00a4 1B68     		ldr	r3, [r3]
 2833 00a6 9A42     		cmp	r2, r3
 2834 00a8 03D1     		bne	.L267
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2835              		.loc 1 1637 0
 2836 00aa 0022     		movs	r2, #0
 2837 00ac 064B     		ldr	r3, .L273+16
 2838 00ae 1A60     		str	r2, [r3]
 2839 00b0 38BD     		pop	{r3, r4, r5, pc}
 2840              	.LVL240:
 2841              	.L267:
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2842              		.loc 1 1641 0
 2843 00b2 FFF7FEFF 		bl	vTaskSwitchContext
 2844              	.LVL241:
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2845              		.loc 1 1649 0
 2846 00b6 CFE7     		b	.L258
 2847              	.L274:
 2848              		.align	2
 2849              	.L273:
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 144


 2850 00b8 00000000 		.word	.LANCHOR4
 2851 00bc 00000000 		.word	.LANCHOR13
 2852 00c0 00000000 		.word	.LANCHOR0
 2853 00c4 00000000 		.word	.LANCHOR11
 2854 00c8 00000000 		.word	.LANCHOR10
 2855 00cc 00000000 		.word	.LANCHOR16
 2856 00d0 04ED00E0 		.word	-536810236
 2857 00d4 00000000 		.word	.LANCHOR9
 2858              		.cfi_endproc
 2859              	.LFE13:
 2861              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2862              		.align	1
 2863              		.global	vTaskPlaceOnEventList
 2864              		.syntax unified
 2865              		.thumb
 2866              		.thumb_func
 2867              		.fpu fpv4-sp-d16
 2869              	vTaskPlaceOnEventList:
 2870              	.LFB27:
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2871              		.loc 1 2821 0
 2872              		.cfi_startproc
 2873              		@ args = 0, pretend = 0, frame = 0
 2874              		@ frame_needed = 0, uses_anonymous_args = 0
 2875              	.LVL242:
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2876              		.loc 1 2822 0
 2877 0000 40B9     		cbnz	r0, .L276
 2878              	.LBB144:
 2879              	.LBB145:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2880              		.loc 2 237 0
 2881              		.syntax unified
 2882              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2883 0002 4FF05003 			mov r3, #80												
 2884 0006 83F31188 		msr basepri, r3											
 2885 000a BFF36F8F 		isb														
 2886 000e BFF34F8F 		dsb														
 2887              	
 2888              	@ 0 "" 2
 2889              	.LVL243:
 2890              		.thumb
 2891              		.syntax unified
 2892              	.L277:
 2893 0012 FEE7     		b	.L277
 2894              	.L276:
 2895              	.LBE145:
 2896              	.LBE144:
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2897              		.loc 1 2821 0
 2898 0014 10B5     		push	{r4, lr}
 2899              	.LCFI31:
 2900              		.cfi_def_cfa_offset 8
 2901              		.cfi_offset 4, -8
 2902              		.cfi_offset 14, -4
 2903 0016 0C46     		mov	r4, r1
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 145


 2904              		.loc 1 2831 0
 2905 0018 044B     		ldr	r3, .L280
 2906 001a 1968     		ldr	r1, [r3]
 2907              	.LVL244:
 2908 001c 1831     		adds	r1, r1, #24
 2909 001e FFF7FEFF 		bl	vListInsert
 2910              	.LVL245:
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2911              		.loc 1 2833 0
 2912 0022 0121     		movs	r1, #1
 2913 0024 2046     		mov	r0, r4
 2914 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2915              	.LVL246:
 2916 002a 10BD     		pop	{r4, pc}
 2917              	.LVL247:
 2918              	.L281:
 2919              		.align	2
 2920              	.L280:
 2921 002c 00000000 		.word	.LANCHOR10
 2922              		.cfi_endproc
 2923              	.LFE27:
 2925              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2926              		.align	1
 2927              		.global	vTaskPlaceOnUnorderedEventList
 2928              		.syntax unified
 2929              		.thumb
 2930              		.thumb_func
 2931              		.fpu fpv4-sp-d16
 2933              	vTaskPlaceOnUnorderedEventList:
 2934              	.LFB28:
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2935              		.loc 1 2838 0
 2936              		.cfi_startproc
 2937              		@ args = 0, pretend = 0, frame = 0
 2938              		@ frame_needed = 0, uses_anonymous_args = 0
 2939              	.LVL248:
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2940              		.loc 1 2839 0
 2941 0000 60B1     		cbz	r0, .L289
 2942 0002 0346     		mov	r3, r0
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2943              		.loc 1 2843 0
 2944 0004 1348     		ldr	r0, .L290
 2945              	.LVL249:
 2946 0006 0068     		ldr	r0, [r0]
 2947 0008 88B9     		cbnz	r0, .L285
 2948              	.LBB146:
 2949              	.LBB147:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2950              		.loc 2 237 0
 2951              		.syntax unified
 2952              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2953 000a 4FF05003 			mov r3, #80												
 2954 000e 83F31188 		msr basepri, r3											
 2955 0012 BFF36F8F 		isb														
 2956 0016 BFF34F8F 		dsb														
 2957              	
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 146


 2958              	@ 0 "" 2
 2959              	.LVL250:
 2960              		.thumb
 2961              		.syntax unified
 2962              	.L286:
 2963 001a FEE7     		b	.L286
 2964              	.LVL251:
 2965              	.L289:
 2966              	.LBE147:
 2967              	.LBE146:
 2968              	.LBB148:
 2969              	.LBB149:
 2970              		.syntax unified
 2971              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2972 001c 4FF05003 			mov r3, #80												
 2973 0020 83F31188 		msr basepri, r3											
 2974 0024 BFF36F8F 		isb														
 2975 0028 BFF34F8F 		dsb														
 2976              	
 2977              	@ 0 "" 2
 2978              	.LVL252:
 2979              		.thumb
 2980              		.syntax unified
 2981              	.L284:
 2982 002c FEE7     		b	.L284
 2983              	.LVL253:
 2984              	.L285:
 2985              	.LBE149:
 2986              	.LBE148:
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2987              		.loc 1 2838 0
 2988 002e 10B5     		push	{r4, lr}
 2989              	.LCFI32:
 2990              		.cfi_def_cfa_offset 8
 2991              		.cfi_offset 4, -8
 2992              		.cfi_offset 14, -4
 2993 0030 1846     		mov	r0, r3
 2994 0032 1446     		mov	r4, r2
 2995 0034 0B46     		mov	r3, r1
 2996              	.LVL254:
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2997              		.loc 1 2848 0
 2998 0036 084A     		ldr	r2, .L290+4
 2999              	.LVL255:
 3000 0038 1168     		ldr	r1, [r2]
 3001              	.LVL256:
 3002 003a 43F00043 		orr	r3, r3, #-2147483648
 3003              	.LVL257:
 3004 003e 8B61     		str	r3, [r1, #24]
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3005              		.loc 1 2855 0
 3006 0040 1168     		ldr	r1, [r2]
 3007 0042 1831     		adds	r1, r1, #24
 3008 0044 FFF7FEFF 		bl	vListInsertEnd
 3009              	.LVL258:
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3010              		.loc 1 2857 0
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 147


 3011 0048 0121     		movs	r1, #1
 3012 004a 2046     		mov	r0, r4
 3013 004c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3014              	.LVL259:
 3015 0050 10BD     		pop	{r4, pc}
 3016              	.LVL260:
 3017              	.L291:
 3018 0052 00BF     		.align	2
 3019              	.L290:
 3020 0054 00000000 		.word	.LANCHOR16
 3021 0058 00000000 		.word	.LANCHOR10
 3022              		.cfi_endproc
 3023              	.LFE28:
 3025              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3026              		.align	1
 3027              		.global	xTaskRemoveFromEventList
 3028              		.syntax unified
 3029              		.thumb
 3030              		.thumb_func
 3031              		.fpu fpv4-sp-d16
 3033              	xTaskRemoveFromEventList:
 3034              	.LFB29:
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3035              		.loc 1 2895 0
 3036              		.cfi_startproc
 3037              		@ args = 0, pretend = 0, frame = 0
 3038              		@ frame_needed = 0, uses_anonymous_args = 0
 3039              	.LVL261:
 3040 0000 38B5     		push	{r3, r4, r5, lr}
 3041              	.LCFI33:
 3042              		.cfi_def_cfa_offset 16
 3043              		.cfi_offset 3, -16
 3044              		.cfi_offset 4, -12
 3045              		.cfi_offset 5, -8
 3046              		.cfi_offset 14, -4
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3047              		.loc 1 2912 0
 3048 0002 C368     		ldr	r3, [r0, #12]
 3049 0004 DC68     		ldr	r4, [r3, #12]
 3050              	.LVL262:
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3051              		.loc 1 2913 0
 3052 0006 24B3     		cbz	r4, .L300
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3053              		.loc 1 2914 0
 3054 0008 04F11805 		add	r5, r4, #24
 3055 000c 2846     		mov	r0, r5
 3056              	.LVL263:
 3057 000e FFF7FEFF 		bl	uxListRemove
 3058              	.LVL264:
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3059              		.loc 1 2916 0
 3060 0012 184B     		ldr	r3, .L301
 3061 0014 1B68     		ldr	r3, [r3]
 3062 0016 2BBB     		cbnz	r3, .L295
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3063              		.loc 1 2918 0
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 148


 3064 0018 251D     		adds	r5, r4, #4
 3065 001a 2846     		mov	r0, r5
 3066 001c FFF7FEFF 		bl	uxListRemove
 3067              	.LVL265:
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3068              		.loc 1 2919 0
 3069 0020 E36A     		ldr	r3, [r4, #44]
 3070 0022 0122     		movs	r2, #1
 3071 0024 9A40     		lsls	r2, r2, r3
 3072 0026 1449     		ldr	r1, .L301+4
 3073 0028 0868     		ldr	r0, [r1]
 3074 002a 0243     		orrs	r2, r2, r0
 3075 002c 0A60     		str	r2, [r1]
 3076 002e 03EB8303 		add	r3, r3, r3, lsl #2
 3077 0032 9A00     		lsls	r2, r3, #2
 3078 0034 2946     		mov	r1, r5
 3079 0036 1148     		ldr	r0, .L301+8
 3080 0038 1044     		add	r0, r0, r2
 3081 003a FFF7FEFF 		bl	vListInsertEnd
 3082              	.LVL266:
 3083              	.L296:
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3084              		.loc 1 2928 0
 3085 003e E26A     		ldr	r2, [r4, #44]
 3086 0040 0F4B     		ldr	r3, .L301+12
 3087 0042 1B68     		ldr	r3, [r3]
 3088 0044 DB6A     		ldr	r3, [r3, #44]
 3089 0046 9A42     		cmp	r2, r3
 3090 0048 11D9     		bls	.L298
 3091              	.LVL267:
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3092              		.loc 1 2937 0
 3093 004a 0120     		movs	r0, #1
 3094 004c 0D4B     		ldr	r3, .L301+16
 3095 004e 1860     		str	r0, [r3]
 3096 0050 38BD     		pop	{r3, r4, r5, pc}
 3097              	.LVL268:
 3098              	.L300:
 3099              	.LBB150:
 3100              	.LBB151:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3101              		.loc 2 237 0
 3102              		.syntax unified
 3103              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3104 0052 4FF05003 			mov r3, #80												
 3105 0056 83F31188 		msr basepri, r3											
 3106 005a BFF36F8F 		isb														
 3107 005e BFF34F8F 		dsb														
 3108              	
 3109              	@ 0 "" 2
 3110              	.LVL269:
 3111              		.thumb
 3112              		.syntax unified
 3113              	.L294:
 3114 0062 FEE7     		b	.L294
 3115              	.LVL270:
 3116              	.L295:
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 149


 3117              	.LBE151:
 3118              	.LBE150:
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3119              		.loc 1 2925 0
 3120 0064 2946     		mov	r1, r5
 3121 0066 0848     		ldr	r0, .L301+20
 3122 0068 FFF7FEFF 		bl	vListInsertEnd
 3123              	.LVL271:
 3124 006c E7E7     		b	.L296
 3125              	.L298:
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3126              		.loc 1 2941 0
 3127 006e 0020     		movs	r0, #0
 3128              	.LVL272:
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3129              		.loc 1 2959 0
 3130 0070 38BD     		pop	{r3, r4, r5, pc}
 3131              	.LVL273:
 3132              	.L302:
 3133 0072 00BF     		.align	2
 3134              	.L301:
 3135 0074 00000000 		.word	.LANCHOR16
 3136 0078 00000000 		.word	.LANCHOR13
 3137 007c 00000000 		.word	.LANCHOR4
 3138 0080 00000000 		.word	.LANCHOR10
 3139 0084 00000000 		.word	.LANCHOR20
 3140 0088 00000000 		.word	.LANCHOR1
 3141              		.cfi_endproc
 3142              	.LFE29:
 3144              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 3145              		.align	1
 3146              		.global	xTaskRemoveFromUnorderedEventList
 3147              		.syntax unified
 3148              		.thumb
 3149              		.thumb_func
 3150              		.fpu fpv4-sp-d16
 3152              	xTaskRemoveFromUnorderedEventList:
 3153              	.LFB30:
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3154              		.loc 1 2963 0
 3155              		.cfi_startproc
 3156              		@ args = 0, pretend = 0, frame = 0
 3157              		@ frame_needed = 0, uses_anonymous_args = 0
 3158              	.LVL274:
 3159 0000 38B5     		push	{r3, r4, r5, lr}
 3160              	.LCFI34:
 3161              		.cfi_def_cfa_offset 16
 3162              		.cfi_offset 3, -16
 3163              		.cfi_offset 4, -12
 3164              		.cfi_offset 5, -8
 3165              		.cfi_offset 14, -4
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3166              		.loc 1 2969 0
 3167 0002 1D4B     		ldr	r3, .L312
 3168 0004 1B68     		ldr	r3, [r3]
 3169 0006 43B9     		cbnz	r3, .L304
 3170              	.LBB152:
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 150


 3171              	.LBB153:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3172              		.loc 2 237 0
 3173              		.syntax unified
 3174              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3175 0008 4FF05003 			mov r3, #80												
 3176 000c 83F31188 		msr basepri, r3											
 3177 0010 BFF36F8F 		isb														
 3178 0014 BFF34F8F 		dsb														
 3179              	
 3180              	@ 0 "" 2
 3181              	.LVL275:
 3182              		.thumb
 3183              		.syntax unified
 3184              	.L305:
 3185 0018 FEE7     		b	.L305
 3186              	.L304:
 3187              	.LBE153:
 3188              	.LBE152:
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3189              		.loc 1 2972 0
 3190 001a 41F00041 		orr	r1, r1, #-2147483648
 3191              	.LVL276:
 3192 001e 0160     		str	r1, [r0]
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3193              		.loc 1 2976 0
 3194 0020 C468     		ldr	r4, [r0, #12]
 3195              	.LVL277:
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3196              		.loc 1 2977 0
 3197 0022 F4B1     		cbz	r4, .L311
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3198              		.loc 1 2978 0
 3199 0024 FFF7FEFF 		bl	uxListRemove
 3200              	.LVL278:
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3201              		.loc 1 2983 0
 3202 0028 251D     		adds	r5, r4, #4
 3203 002a 2846     		mov	r0, r5
 3204 002c FFF7FEFF 		bl	uxListRemove
 3205              	.LVL279:
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3206              		.loc 1 2984 0
 3207 0030 E36A     		ldr	r3, [r4, #44]
 3208 0032 0122     		movs	r2, #1
 3209 0034 9A40     		lsls	r2, r2, r3
 3210 0036 1149     		ldr	r1, .L312+4
 3211 0038 0868     		ldr	r0, [r1]
 3212 003a 0243     		orrs	r2, r2, r0
 3213 003c 0A60     		str	r2, [r1]
 3214 003e 03EB8303 		add	r3, r3, r3, lsl #2
 3215 0042 9A00     		lsls	r2, r3, #2
 3216 0044 2946     		mov	r1, r5
 3217 0046 0E48     		ldr	r0, .L312+8
 3218 0048 1044     		add	r0, r0, r2
 3219 004a FFF7FEFF 		bl	vListInsertEnd
 3220              	.LVL280:
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 151


2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3221              		.loc 1 2986 0
 3222 004e E26A     		ldr	r2, [r4, #44]
 3223 0050 0C4B     		ldr	r3, .L312+12
 3224 0052 1B68     		ldr	r3, [r3]
 3225 0054 DB6A     		ldr	r3, [r3, #44]
 3226 0056 9A42     		cmp	r2, r3
 3227 0058 0CD9     		bls	.L309
 3228              	.LVL281:
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3229              		.loc 1 2996 0
 3230 005a 0120     		movs	r0, #1
 3231 005c 0A4B     		ldr	r3, .L312+16
 3232 005e 1860     		str	r0, [r3]
 3233 0060 38BD     		pop	{r3, r4, r5, pc}
 3234              	.LVL282:
 3235              	.L311:
 3236              	.LBB154:
 3237              	.LBB155:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3238              		.loc 2 237 0
 3239              		.syntax unified
 3240              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3241 0062 4FF05003 			mov r3, #80												
 3242 0066 83F31188 		msr basepri, r3											
 3243 006a BFF36F8F 		isb														
 3244 006e BFF34F8F 		dsb														
 3245              	
 3246              	@ 0 "" 2
 3247              	.LVL283:
 3248              		.thumb
 3249              		.syntax unified
 3250              	.L307:
 3251 0072 FEE7     		b	.L307
 3252              	.LVL284:
 3253              	.L309:
 3254              	.LBE155:
 3255              	.LBE154:
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3256              		.loc 1 3000 0
 3257 0074 0020     		movs	r0, #0
 3258              	.LVL285:
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3259              		.loc 1 3004 0
 3260 0076 38BD     		pop	{r3, r4, r5, pc}
 3261              	.LVL286:
 3262              	.L313:
 3263              		.align	2
 3264              	.L312:
 3265 0078 00000000 		.word	.LANCHOR16
 3266 007c 00000000 		.word	.LANCHOR13
 3267 0080 00000000 		.word	.LANCHOR4
 3268 0084 00000000 		.word	.LANCHOR10
 3269 0088 00000000 		.word	.LANCHOR20
 3270              		.cfi_endproc
 3271              	.LFE30:
 3273              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 152


 3274              		.align	1
 3275              		.global	vTaskSetTimeOutState
 3276              		.syntax unified
 3277              		.thumb
 3278              		.thumb_func
 3279              		.fpu fpv4-sp-d16
 3281              	vTaskSetTimeOutState:
 3282              	.LFB31:
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3283              		.loc 1 3008 0
 3284              		.cfi_startproc
 3285              		@ args = 0, pretend = 0, frame = 0
 3286              		@ frame_needed = 0, uses_anonymous_args = 0
 3287              		@ link register save eliminated.
 3288              	.LVL287:
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3289              		.loc 1 3009 0
 3290 0000 30B1     		cbz	r0, .L317
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3291              		.loc 1 3010 0
 3292 0002 084A     		ldr	r2, .L318
 3293 0004 1268     		ldr	r2, [r2]
 3294 0006 0260     		str	r2, [r0]
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3295              		.loc 1 3011 0
 3296 0008 074A     		ldr	r2, .L318+4
 3297 000a 1268     		ldr	r2, [r2]
 3298 000c 4260     		str	r2, [r0, #4]
 3299 000e 7047     		bx	lr
 3300              	.L317:
 3301              	.LBB156:
 3302              	.LBB157:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3303              		.loc 2 237 0
 3304              		.syntax unified
 3305              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3306 0010 4FF05003 			mov r3, #80												
 3307 0014 83F31188 		msr basepri, r3											
 3308 0018 BFF36F8F 		isb														
 3309 001c BFF34F8F 		dsb														
 3310              	
 3311              	@ 0 "" 2
 3312              	.LVL288:
 3313              		.thumb
 3314              		.syntax unified
 3315              	.L316:
 3316 0020 FEE7     		b	.L316
 3317              	.L319:
 3318 0022 00BF     		.align	2
 3319              	.L318:
 3320 0024 00000000 		.word	.LANCHOR18
 3321 0028 00000000 		.word	.LANCHOR14
 3322              	.LBE157:
 3323              	.LBE156:
 3324              		.cfi_endproc
 3325              	.LFE31:
 3327              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 153


 3328              		.align	1
 3329              		.global	xTaskCheckForTimeOut
 3330              		.syntax unified
 3331              		.thumb
 3332              		.thumb_func
 3333              		.fpu fpv4-sp-d16
 3335              	xTaskCheckForTimeOut:
 3336              	.LFB32:
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 3337              		.loc 1 3016 0
 3338              		.cfi_startproc
 3339              		@ args = 0, pretend = 0, frame = 0
 3340              		@ frame_needed = 0, uses_anonymous_args = 0
 3341              	.LVL289:
 3342 0000 38B5     		push	{r3, r4, r5, lr}
 3343              	.LCFI35:
 3344              		.cfi_def_cfa_offset 16
 3345              		.cfi_offset 3, -16
 3346              		.cfi_offset 4, -12
 3347              		.cfi_offset 5, -8
 3348              		.cfi_offset 14, -4
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3349              		.loc 1 3019 0
 3350 0002 C0B1     		cbz	r0, .L331
 3351 0004 0446     		mov	r4, r0
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3352              		.loc 1 3020 0
 3353 0006 F9B1     		cbz	r1, .L332
 3354 0008 0D46     		mov	r5, r1
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3355              		.loc 1 3022 0
 3356 000a FFF7FEFF 		bl	vPortEnterCritical
 3357              	.LVL290:
 3358              	.LBB158:
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3359              		.loc 1 3025 0
 3360 000e 1A4B     		ldr	r3, .L334
 3361 0010 1968     		ldr	r1, [r3]
 3362              	.LVL291:
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3363              		.loc 1 3039 0
 3364 0012 2B68     		ldr	r3, [r5]
 3365 0014 B3F1FF3F 		cmp	r3, #-1
 3366 0018 2AD0     		beq	.L327
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3367              		.loc 1 3049 0
 3368 001a 2068     		ldr	r0, [r4]
 3369 001c 174A     		ldr	r2, .L334+4
 3370 001e 1268     		ldr	r2, [r2]
 3371 0020 9042     		cmp	r0, r2
 3372 0022 02D0     		beq	.L326
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3373              		.loc 1 3049 0 is_stmt 0 discriminator 1
 3374 0024 6268     		ldr	r2, [r4, #4]
 3375 0026 9142     		cmp	r1, r2
 3376 0028 24D2     		bcs	.L328
 3377              	.L326:
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 154


3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3378              		.loc 1 3058 0 is_stmt 1
 3379 002a 6268     		ldr	r2, [r4, #4]
 3380 002c 881A     		subs	r0, r1, r2
 3381 002e 8342     		cmp	r3, r0
 3382 0030 13D8     		bhi	.L333
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3383              		.loc 1 3067 0
 3384 0032 0124     		movs	r4, #1
 3385              	.LVL292:
 3386 0034 18E0     		b	.L325
 3387              	.LVL293:
 3388              	.L331:
 3389              	.LBE158:
 3390              	.LBB159:
 3391              	.LBB160:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3392              		.loc 2 237 0
 3393              		.syntax unified
 3394              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3395 0036 4FF05003 			mov r3, #80												
 3396 003a 83F31188 		msr basepri, r3											
 3397 003e BFF36F8F 		isb														
 3398 0042 BFF34F8F 		dsb														
 3399              	
 3400              	@ 0 "" 2
 3401              	.LVL294:
 3402              		.thumb
 3403              		.syntax unified
 3404              	.L322:
 3405 0046 FEE7     		b	.L322
 3406              	.L332:
 3407              	.LBE160:
 3408              	.LBE159:
 3409              	.LBB161:
 3410              	.LBB162:
 3411              		.syntax unified
 3412              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3413 0048 4FF05003 			mov r3, #80												
 3414 004c 83F31188 		msr basepri, r3											
 3415 0050 BFF36F8F 		isb														
 3416 0054 BFF34F8F 		dsb														
 3417              	
 3418              	@ 0 "" 2
 3419              	.LVL295:
 3420              		.thumb
 3421              		.syntax unified
 3422              	.L324:
 3423 0058 FEE7     		b	.L324
 3424              	.LVL296:
 3425              	.L333:
 3426              	.LBE162:
 3427              	.LBE161:
 3428              	.LBB163:
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3429              		.loc 1 3061 0
 3430 005a 521A     		subs	r2, r2, r1
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 155


 3431 005c 1344     		add	r3, r3, r2
 3432 005e 2B60     		str	r3, [r5]
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 3433              		.loc 1 3062 0
 3434 0060 2046     		mov	r0, r4
 3435 0062 FFF7FEFF 		bl	vTaskSetTimeOutState
 3436              	.LVL297:
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3437              		.loc 1 3063 0
 3438 0066 0024     		movs	r4, #0
 3439              	.LVL298:
 3440              	.L325:
 3441              	.LBE163:
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3442              		.loc 1 3070 0
 3443 0068 FFF7FEFF 		bl	vPortExitCritical
 3444              	.LVL299:
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3445              		.loc 1 3073 0
 3446 006c 2046     		mov	r0, r4
 3447 006e 38BD     		pop	{r3, r4, r5, pc}
 3448              	.LVL300:
 3449              	.L327:
 3450              	.LBB164:
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3451              		.loc 1 3044 0
 3452 0070 0024     		movs	r4, #0
 3453              	.LVL301:
 3454 0072 F9E7     		b	.L325
 3455              	.LVL302:
 3456              	.L328:
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3457              		.loc 1 3056 0
 3458 0074 0124     		movs	r4, #1
 3459              	.LVL303:
 3460 0076 F7E7     		b	.L325
 3461              	.L335:
 3462              		.align	2
 3463              	.L334:
 3464 0078 00000000 		.word	.LANCHOR14
 3465 007c 00000000 		.word	.LANCHOR18
 3466              	.LBE164:
 3467              		.cfi_endproc
 3468              	.LFE32:
 3470              		.section	.text.vTaskMissedYield,"ax",%progbits
 3471              		.align	1
 3472              		.global	vTaskMissedYield
 3473              		.syntax unified
 3474              		.thumb
 3475              		.thumb_func
 3476              		.fpu fpv4-sp-d16
 3478              	vTaskMissedYield:
 3479              	.LFB33:
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 3480              		.loc 1 3077 0
 3481              		.cfi_startproc
 3482              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 156


 3483              		@ frame_needed = 0, uses_anonymous_args = 0
 3484              		@ link register save eliminated.
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3485              		.loc 1 3078 0
 3486 0000 0122     		movs	r2, #1
 3487 0002 014B     		ldr	r3, .L337
 3488 0004 1A60     		str	r2, [r3]
 3489 0006 7047     		bx	lr
 3490              	.L338:
 3491              		.align	2
 3492              	.L337:
 3493 0008 00000000 		.word	.LANCHOR20
 3494              		.cfi_endproc
 3495              	.LFE33:
 3497              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3498              		.align	1
 3499              		.global	xTaskGetCurrentTaskHandle
 3500              		.syntax unified
 3501              		.thumb
 3502              		.thumb_func
 3503              		.fpu fpv4-sp-d16
 3505              	xTaskGetCurrentTaskHandle:
 3506              	.LFB39:
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 3507              		.loc 1 3662 0
 3508              		.cfi_startproc
 3509              		@ args = 0, pretend = 0, frame = 0
 3510              		@ frame_needed = 0, uses_anonymous_args = 0
 3511              		@ link register save eliminated.
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3512              		.loc 1 3668 0
 3513 0000 014B     		ldr	r3, .L340
 3514 0002 1868     		ldr	r0, [r3]
 3515              	.LVL304:
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3516              		.loc 1 3671 0
 3517 0004 7047     		bx	lr
 3518              	.L341:
 3519 0006 00BF     		.align	2
 3520              	.L340:
 3521 0008 00000000 		.word	.LANCHOR10
 3522              		.cfi_endproc
 3523              	.LFE39:
 3525              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 3526              		.align	1
 3527              		.global	xTaskGetSchedulerState
 3528              		.syntax unified
 3529              		.thumb
 3530              		.thumb_func
 3531              		.fpu fpv4-sp-d16
 3533              	xTaskGetSchedulerState:
 3534              	.LFB40:
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 3535              		.loc 1 3679 0
 3536              		.cfi_startproc
 3537              		@ args = 0, pretend = 0, frame = 0
 3538              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 157


 3539              		@ link register save eliminated.
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3540              		.loc 1 3682 0
 3541 0000 054B     		ldr	r3, .L346
 3542 0002 1B68     		ldr	r3, [r3]
 3543 0004 23B1     		cbz	r3, .L344
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3544              		.loc 1 3688 0
 3545 0006 054B     		ldr	r3, .L346+4
 3546 0008 1B68     		ldr	r3, [r3]
 3547 000a 1BB9     		cbnz	r3, .L345
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3548              		.loc 1 3690 0
 3549 000c 0220     		movs	r0, #2
 3550 000e 7047     		bx	lr
 3551              	.L344:
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3552              		.loc 1 3684 0
 3553 0010 0120     		movs	r0, #1
 3554 0012 7047     		bx	lr
 3555              	.L345:
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3556              		.loc 1 3694 0
 3557 0014 0020     		movs	r0, #0
 3558              	.LVL305:
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3559              		.loc 1 3699 0
 3560 0016 7047     		bx	lr
 3561              	.L347:
 3562              		.align	2
 3563              	.L346:
 3564 0018 00000000 		.word	.LANCHOR11
 3565 001c 00000000 		.word	.LANCHOR16
 3566              		.cfi_endproc
 3567              	.LFE40:
 3569              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 3570              		.align	1
 3571              		.global	vTaskPriorityInherit
 3572              		.syntax unified
 3573              		.thumb
 3574              		.thumb_func
 3575              		.fpu fpv4-sp-d16
 3577              	vTaskPriorityInherit:
 3578              	.LFB41:
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3579              		.loc 1 3707 0
 3580              		.cfi_startproc
 3581              		@ args = 0, pretend = 0, frame = 0
 3582              		@ frame_needed = 0, uses_anonymous_args = 0
 3583              	.LVL306:
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3584              		.loc 1 3712 0
 3585 0000 0028     		cmp	r0, #0
 3586 0002 47D0     		beq	.L356
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3587              		.loc 1 3707 0
 3588 0004 38B5     		push	{r3, r4, r5, lr}
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 158


 3589              	.LCFI36:
 3590              		.cfi_def_cfa_offset 16
 3591              		.cfi_offset 3, -16
 3592              		.cfi_offset 4, -12
 3593              		.cfi_offset 5, -8
 3594              		.cfi_offset 14, -4
 3595 0006 0446     		mov	r4, r0
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3596              		.loc 1 3717 0
 3597 0008 C36A     		ldr	r3, [r0, #44]
 3598 000a 2349     		ldr	r1, .L361
 3599 000c 0968     		ldr	r1, [r1]
 3600 000e C96A     		ldr	r1, [r1, #44]
 3601 0010 8B42     		cmp	r3, r1
 3602 0012 16D2     		bcs	.L348
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3603              		.loc 1 3722 0
 3604 0014 8169     		ldr	r1, [r0, #24]
 3605 0016 0029     		cmp	r1, #0
 3606 0018 05DB     		blt	.L350
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3607              		.loc 1 3724 0
 3608 001a 1F49     		ldr	r1, .L361
 3609 001c 0968     		ldr	r1, [r1]
 3610 001e C96A     		ldr	r1, [r1, #44]
 3611 0020 C1F10701 		rsb	r1, r1, #7
 3612 0024 8161     		str	r1, [r0, #24]
 3613              	.L350:
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3614              		.loc 1 3733 0
 3615 0026 6069     		ldr	r0, [r4, #20]
 3616              	.LVL307:
 3617 0028 03EB8303 		add	r3, r3, r3, lsl #2
 3618 002c 9900     		lsls	r1, r3, #2
 3619 002e 1B4B     		ldr	r3, .L361+4
 3620 0030 0B44     		add	r3, r3, r1
 3621 0032 9842     		cmp	r0, r3
 3622 0034 06D0     		beq	.L359
 3623 0036 0023     		movs	r3, #0
 3624              	.L351:
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3625              		.loc 1 3733 0 is_stmt 0 discriminator 4
 3626 0038 33B9     		cbnz	r3, .L360
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3627              		.loc 1 3751 0 is_stmt 1
 3628 003a 174B     		ldr	r3, .L361
 3629 003c 1B68     		ldr	r3, [r3]
 3630 003e DB6A     		ldr	r3, [r3, #44]
 3631 0040 E362     		str	r3, [r4, #44]
 3632              	.L348:
 3633 0042 38BD     		pop	{r3, r4, r5, pc}
 3634              	.LVL308:
 3635              	.L359:
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3636              		.loc 1 3733 0
 3637 0044 0123     		movs	r3, #1
 3638 0046 F7E7     		b	.L351
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 159


 3639              	.L360:
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3640              		.loc 1 3735 0
 3641 0048 251D     		adds	r5, r4, #4
 3642 004a 2846     		mov	r0, r5
 3643 004c FFF7FEFF 		bl	uxListRemove
 3644              	.LVL309:
 3645 0050 68B9     		cbnz	r0, .L353
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3646              		.loc 1 3737 0
 3647 0052 E36A     		ldr	r3, [r4, #44]
 3648 0054 03EB8301 		add	r1, r3, r3, lsl #2
 3649 0058 8A00     		lsls	r2, r1, #2
 3650 005a 1049     		ldr	r1, .L361+4
 3651 005c 8A58     		ldr	r2, [r1, r2]
 3652 005e 32B9     		cbnz	r2, .L353
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3653              		.loc 1 3737 0 is_stmt 0 discriminator 1
 3654 0060 0122     		movs	r2, #1
 3655 0062 9A40     		lsls	r2, r2, r3
 3656 0064 0E49     		ldr	r1, .L361+8
 3657 0066 0B68     		ldr	r3, [r1]
 3658 0068 23EA0203 		bic	r3, r3, r2
 3659 006c 0B60     		str	r3, [r1]
 3660              	.L353:
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3661              		.loc 1 3745 0 is_stmt 1
 3662 006e 0A4B     		ldr	r3, .L361
 3663 0070 1B68     		ldr	r3, [r3]
 3664 0072 DB6A     		ldr	r3, [r3, #44]
 3665 0074 E362     		str	r3, [r4, #44]
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3666              		.loc 1 3746 0
 3667 0076 0122     		movs	r2, #1
 3668 0078 9A40     		lsls	r2, r2, r3
 3669 007a 0949     		ldr	r1, .L361+8
 3670 007c 0868     		ldr	r0, [r1]
 3671 007e 0243     		orrs	r2, r2, r0
 3672 0080 0A60     		str	r2, [r1]
 3673 0082 03EB8303 		add	r3, r3, r3, lsl #2
 3674 0086 9A00     		lsls	r2, r3, #2
 3675 0088 2946     		mov	r1, r5
 3676 008a 0448     		ldr	r0, .L361+4
 3677 008c 1044     		add	r0, r0, r2
 3678 008e FFF7FEFF 		bl	vListInsertEnd
 3679              	.LVL310:
 3680 0092 38BD     		pop	{r3, r4, r5, pc}
 3681              	.LVL311:
 3682              	.L356:
 3683              	.LCFI37:
 3684              		.cfi_def_cfa_offset 0
 3685              		.cfi_restore 3
 3686              		.cfi_restore 4
 3687              		.cfi_restore 5
 3688              		.cfi_restore 14
 3689 0094 7047     		bx	lr
 3690              	.L362:
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 160


 3691 0096 00BF     		.align	2
 3692              	.L361:
 3693 0098 00000000 		.word	.LANCHOR10
 3694 009c 00000000 		.word	.LANCHOR4
 3695 00a0 00000000 		.word	.LANCHOR13
 3696              		.cfi_endproc
 3697              	.LFE41:
 3699              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3700              		.align	1
 3701              		.global	xTaskPriorityDisinherit
 3702              		.syntax unified
 3703              		.thumb
 3704              		.thumb_func
 3705              		.fpu fpv4-sp-d16
 3707              	xTaskPriorityDisinherit:
 3708              	.LFB42:
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3709              		.loc 1 3773 0
 3710              		.cfi_startproc
 3711              		@ args = 0, pretend = 0, frame = 0
 3712              		@ frame_needed = 0, uses_anonymous_args = 0
 3713              	.LVL312:
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3714              		.loc 1 3777 0
 3715 0000 0028     		cmp	r0, #0
 3716 0002 4AD0     		beq	.L370
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3717              		.loc 1 3773 0
 3718 0004 38B5     		push	{r3, r4, r5, lr}
 3719              	.LCFI38:
 3720              		.cfi_def_cfa_offset 16
 3721              		.cfi_offset 3, -16
 3722              		.cfi_offset 4, -12
 3723              		.cfi_offset 5, -8
 3724              		.cfi_offset 14, -4
 3725 0006 0446     		mov	r4, r0
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3726              		.loc 1 3783 0
 3727 0008 274A     		ldr	r2, .L377
 3728 000a 1268     		ldr	r2, [r2]
 3729 000c 9042     		cmp	r0, r2
 3730 000e 08D0     		beq	.L365
 3731              	.LBB165:
 3732              	.LBB166:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3733              		.loc 2 237 0
 3734              		.syntax unified
 3735              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3736 0010 4FF05003 			mov r3, #80												
 3737 0014 83F31188 		msr basepri, r3											
 3738 0018 BFF36F8F 		isb														
 3739 001c BFF34F8F 		dsb														
 3740              	
 3741              	@ 0 "" 2
 3742              	.LVL313:
 3743              		.thumb
 3744              		.syntax unified
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 161


 3745              	.L366:
 3746 0020 FEE7     		b	.L366
 3747              	.L365:
 3748              	.LBE166:
 3749              	.LBE165:
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 3750              		.loc 1 3785 0
 3751 0022 826C     		ldr	r2, [r0, #72]
 3752 0024 42B9     		cbnz	r2, .L367
 3753              	.LBB167:
 3754              	.LBB168:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3755              		.loc 2 237 0
 3756              		.syntax unified
 3757              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3758 0026 4FF05003 			mov r3, #80												
 3759 002a 83F31188 		msr basepri, r3											
 3760 002e BFF36F8F 		isb														
 3761 0032 BFF34F8F 		dsb														
 3762              	
 3763              	@ 0 "" 2
 3764              	.LVL314:
 3765              		.thumb
 3766              		.syntax unified
 3767              	.L368:
 3768 0036 FEE7     		b	.L368
 3769              	.L367:
 3770              	.LBE168:
 3771              	.LBE167:
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3772              		.loc 1 3786 0
 3773 0038 013A     		subs	r2, r2, #1
 3774 003a 8264     		str	r2, [r0, #72]
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3775              		.loc 1 3790 0
 3776 003c C06A     		ldr	r0, [r0, #44]
 3777              	.LVL315:
 3778 003e 616C     		ldr	r1, [r4, #68]
 3779 0040 8842     		cmp	r0, r1
 3780 0042 2CD0     		beq	.L371
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3781              		.loc 1 3793 0
 3782 0044 6ABB     		cbnz	r2, .L372
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3783              		.loc 1 3800 0
 3784 0046 251D     		adds	r5, r4, #4
 3785 0048 2846     		mov	r0, r5
 3786 004a FFF7FEFF 		bl	uxListRemove
 3787              	.LVL316:
 3788 004e 70B9     		cbnz	r0, .L369
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3789              		.loc 1 3802 0
 3790 0050 E26A     		ldr	r2, [r4, #44]
 3791 0052 02EB8201 		add	r1, r2, r2, lsl #2
 3792 0056 8B00     		lsls	r3, r1, #2
 3793 0058 1449     		ldr	r1, .L377+4
 3794 005a CB58     		ldr	r3, [r1, r3]
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 162


 3795 005c 3BB9     		cbnz	r3, .L369
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3796              		.loc 1 3802 0 is_stmt 0 discriminator 1
 3797 005e 0123     		movs	r3, #1
 3798 0060 03FA02F2 		lsl	r2, r3, r2
 3799 0064 1249     		ldr	r1, .L377+8
 3800 0066 0B68     		ldr	r3, [r1]
 3801 0068 23EA0203 		bic	r3, r3, r2
 3802 006c 0B60     		str	r3, [r1]
 3803              	.L369:
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3804              		.loc 1 3812 0 is_stmt 1
 3805 006e 636C     		ldr	r3, [r4, #68]
 3806 0070 E362     		str	r3, [r4, #44]
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3807              		.loc 1 3817 0
 3808 0072 C3F10702 		rsb	r2, r3, #7
 3809 0076 A261     		str	r2, [r4, #24]
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3810              		.loc 1 3818 0
 3811 0078 0124     		movs	r4, #1
 3812              	.LVL317:
 3813 007a 04FA03F2 		lsl	r2, r4, r3
 3814 007e 0C49     		ldr	r1, .L377+8
 3815 0080 0868     		ldr	r0, [r1]
 3816 0082 0243     		orrs	r2, r2, r0
 3817 0084 0A60     		str	r2, [r1]
 3818 0086 03EB8303 		add	r3, r3, r3, lsl #2
 3819 008a 9A00     		lsls	r2, r3, #2
 3820 008c 2946     		mov	r1, r5
 3821 008e 0748     		ldr	r0, .L377+4
 3822 0090 1044     		add	r0, r0, r2
 3823 0092 FFF7FEFF 		bl	vListInsertEnd
 3824              	.LVL318:
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3825              		.loc 1 3828 0
 3826 0096 2046     		mov	r0, r4
 3827 0098 38BD     		pop	{r3, r4, r5, pc}
 3828              	.LVL319:
 3829              	.L370:
 3830              	.LCFI39:
 3831              		.cfi_def_cfa_offset 0
 3832              		.cfi_restore 3
 3833              		.cfi_restore 4
 3834              		.cfi_restore 5
 3835              		.cfi_restore 14
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3836              		.loc 1 3775 0
 3837 009a 0020     		movs	r0, #0
 3838              	.LVL320:
 3839 009c 7047     		bx	lr
 3840              	.LVL321:
 3841              	.L371:
 3842              	.LCFI40:
 3843              		.cfi_def_cfa_offset 16
 3844              		.cfi_offset 3, -16
 3845              		.cfi_offset 4, -12
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 163


 3846              		.cfi_offset 5, -8
 3847              		.cfi_offset 14, -4
 3848 009e 0020     		movs	r0, #0
 3849 00a0 38BD     		pop	{r3, r4, r5, pc}
 3850              	.LVL322:
 3851              	.L372:
 3852 00a2 0020     		movs	r0, #0
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3853              		.loc 1 3846 0
 3854 00a4 38BD     		pop	{r3, r4, r5, pc}
 3855              	.LVL323:
 3856              	.L378:
 3857 00a6 00BF     		.align	2
 3858              	.L377:
 3859 00a8 00000000 		.word	.LANCHOR10
 3860 00ac 00000000 		.word	.LANCHOR4
 3861 00b0 00000000 		.word	.LANCHOR13
 3862              		.cfi_endproc
 3863              	.LFE42:
 3865              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 3866              		.align	1
 3867              		.global	uxTaskResetEventItemValue
 3868              		.syntax unified
 3869              		.thumb
 3870              		.thumb_func
 3871              		.fpu fpv4-sp-d16
 3873              	uxTaskResetEventItemValue:
 3874              	.LFB43:
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 3875              		.loc 1 4163 0
 3876              		.cfi_startproc
 3877              		@ args = 0, pretend = 0, frame = 0
 3878              		@ frame_needed = 0, uses_anonymous_args = 0
 3879              		@ link register save eliminated.
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3880              		.loc 1 4166 0
 3881 0000 044B     		ldr	r3, .L380
 3882 0002 1A68     		ldr	r2, [r3]
 3883 0004 9069     		ldr	r0, [r2, #24]
 3884              	.LVL324:
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3885              		.loc 1 4170 0
 3886 0006 1A68     		ldr	r2, [r3]
 3887 0008 1B68     		ldr	r3, [r3]
 3888 000a DB6A     		ldr	r3, [r3, #44]
 3889 000c C3F10703 		rsb	r3, r3, #7
 3890 0010 9361     		str	r3, [r2, #24]
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3891              		.loc 1 4173 0
 3892 0012 7047     		bx	lr
 3893              	.L381:
 3894              		.align	2
 3895              	.L380:
 3896 0014 00000000 		.word	.LANCHOR10
 3897              		.cfi_endproc
 3898              	.LFE43:
 3900              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 164


 3901              		.align	1
 3902              		.global	pvTaskIncrementMutexHeldCount
 3903              		.syntax unified
 3904              		.thumb
 3905              		.thumb_func
 3906              		.fpu fpv4-sp-d16
 3908              	pvTaskIncrementMutexHeldCount:
 3909              	.LFB44:
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 3910              		.loc 1 4179 0
 3911              		.cfi_startproc
 3912              		@ args = 0, pretend = 0, frame = 0
 3913              		@ frame_needed = 0, uses_anonymous_args = 0
 3914              		@ link register save eliminated.
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3915              		.loc 1 4182 0
 3916 0000 054B     		ldr	r3, .L384
 3917 0002 1B68     		ldr	r3, [r3]
 3918 0004 23B1     		cbz	r3, .L383
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3919              		.loc 1 4184 0
 3920 0006 044B     		ldr	r3, .L384
 3921 0008 1A68     		ldr	r2, [r3]
 3922 000a 936C     		ldr	r3, [r2, #72]
 3923 000c 0133     		adds	r3, r3, #1
 3924 000e 9364     		str	r3, [r2, #72]
 3925              	.L383:
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3926              		.loc 1 4187 0
 3927 0010 014B     		ldr	r3, .L384
 3928 0012 1868     		ldr	r0, [r3]
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3929              		.loc 1 4188 0
 3930 0014 7047     		bx	lr
 3931              	.L385:
 3932 0016 00BF     		.align	2
 3933              	.L384:
 3934 0018 00000000 		.word	.LANCHOR10
 3935              		.cfi_endproc
 3936              	.LFE44:
 3938              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 3939              		.align	1
 3940              		.global	ulTaskNotifyTake
 3941              		.syntax unified
 3942              		.thumb
 3943              		.thumb_func
 3944              		.fpu fpv4-sp-d16
 3946              	ulTaskNotifyTake:
 3947              	.LFB45:
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 3948              		.loc 1 4196 0
 3949              		.cfi_startproc
 3950              		@ args = 0, pretend = 0, frame = 0
 3951              		@ frame_needed = 0, uses_anonymous_args = 0
 3952              	.LVL325:
 3953 0000 38B5     		push	{r3, r4, r5, lr}
 3954              	.LCFI41:
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 165


 3955              		.cfi_def_cfa_offset 16
 3956              		.cfi_offset 3, -16
 3957              		.cfi_offset 4, -12
 3958              		.cfi_offset 5, -8
 3959              		.cfi_offset 14, -4
 3960 0002 0546     		mov	r5, r0
 3961 0004 0C46     		mov	r4, r1
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3962              		.loc 1 4199 0
 3963 0006 FFF7FEFF 		bl	vPortEnterCritical
 3964              	.LVL326:
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3965              		.loc 1 4202 0
 3966 000a 194B     		ldr	r3, .L393
 3967 000c 1B68     		ldr	r3, [r3]
 3968 000e DB6C     		ldr	r3, [r3, #76]
 3969 0010 2BB9     		cbnz	r3, .L387
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3970              		.loc 1 4205 0
 3971 0012 174B     		ldr	r3, .L393
 3972 0014 1B68     		ldr	r3, [r3]
 3973 0016 0122     		movs	r2, #1
 3974 0018 83F85020 		strb	r2, [r3, #80]
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3975              		.loc 1 4207 0
 3976 001c ACB9     		cbnz	r4, .L391
 3977              	.L387:
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3978              		.loc 1 4228 0
 3979 001e FFF7FEFF 		bl	vPortExitCritical
 3980              	.LVL327:
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3981              		.loc 1 4230 0
 3982 0022 FFF7FEFF 		bl	vPortEnterCritical
 3983              	.LVL328:
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3984              		.loc 1 4233 0
 3985 0026 124B     		ldr	r3, .L393
 3986 0028 1B68     		ldr	r3, [r3]
 3987 002a DC6C     		ldr	r4, [r3, #76]
 3988              	.LVL329:
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3989              		.loc 1 4235 0
 3990 002c 24B1     		cbz	r4, .L388
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3991              		.loc 1 4237 0
 3992 002e CDB9     		cbnz	r5, .L392
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3993              		.loc 1 4243 0
 3994 0030 0F4B     		ldr	r3, .L393
 3995 0032 1B68     		ldr	r3, [r3]
 3996 0034 621E     		subs	r2, r4, #1
 3997 0036 DA64     		str	r2, [r3, #76]
 3998              	.L388:
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3999              		.loc 1 4251 0
 4000 0038 0D4B     		ldr	r3, .L393
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 166


 4001 003a 1B68     		ldr	r3, [r3]
 4002 003c 0022     		movs	r2, #0
 4003 003e 83F85020 		strb	r2, [r3, #80]
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4004              		.loc 1 4253 0
 4005 0042 FFF7FEFF 		bl	vPortExitCritical
 4006              	.LVL330:
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4007              		.loc 1 4256 0
 4008 0046 2046     		mov	r0, r4
 4009 0048 38BD     		pop	{r3, r4, r5, pc}
 4010              	.LVL331:
 4011              	.L391:
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 4012              		.loc 1 4209 0
 4013 004a 1146     		mov	r1, r2
 4014 004c 2046     		mov	r0, r4
 4015 004e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4016              	.LVL332:
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4017              		.loc 1 4216 0
 4018 0052 4FF08052 		mov	r2, #268435456
 4019 0056 074B     		ldr	r3, .L393+4
 4020 0058 1A60     		str	r2, [r3]
 4021              		.syntax unified
 4022              	@ 4216 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4023 005a BFF34F8F 		dsb
 4024              	@ 0 "" 2
 4025              	@ 4216 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4026 005e BFF36F8F 		isb
 4027              	@ 0 "" 2
 4028              		.thumb
 4029              		.syntax unified
 4030 0062 DCE7     		b	.L387
 4031              	.LVL333:
 4032              	.L392:
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4033              		.loc 1 4239 0
 4034 0064 024B     		ldr	r3, .L393
 4035 0066 1B68     		ldr	r3, [r3]
 4036 0068 0022     		movs	r2, #0
 4037 006a DA64     		str	r2, [r3, #76]
 4038 006c E4E7     		b	.L388
 4039              	.L394:
 4040 006e 00BF     		.align	2
 4041              	.L393:
 4042 0070 00000000 		.word	.LANCHOR10
 4043 0074 04ED00E0 		.word	-536810236
 4044              		.cfi_endproc
 4045              	.LFE45:
 4047              		.section	.text.xTaskNotifyWait,"ax",%progbits
 4048              		.align	1
 4049              		.global	xTaskNotifyWait
 4050              		.syntax unified
 4051              		.thumb
 4052              		.thumb_func
 4053              		.fpu fpv4-sp-d16
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 167


 4055              	xTaskNotifyWait:
 4056              	.LFB46:
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4057              		.loc 1 4264 0
 4058              		.cfi_startproc
 4059              		@ args = 0, pretend = 0, frame = 0
 4060              		@ frame_needed = 0, uses_anonymous_args = 0
 4061              	.LVL334:
 4062 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4063              	.LCFI42:
 4064              		.cfi_def_cfa_offset 24
 4065              		.cfi_offset 3, -24
 4066              		.cfi_offset 4, -20
 4067              		.cfi_offset 5, -16
 4068              		.cfi_offset 6, -12
 4069              		.cfi_offset 7, -8
 4070              		.cfi_offset 14, -4
 4071 0002 0746     		mov	r7, r0
 4072 0004 0C46     		mov	r4, r1
 4073 0006 1546     		mov	r5, r2
 4074 0008 1E46     		mov	r6, r3
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4075              		.loc 1 4267 0
 4076 000a FFF7FEFF 		bl	vPortEnterCritical
 4077              	.LVL335:
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4078              		.loc 1 4270 0
 4079 000e 204B     		ldr	r3, .L402
 4080 0010 1B68     		ldr	r3, [r3]
 4081 0012 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4082 0016 DBB2     		uxtb	r3, r3
 4083 0018 022B     		cmp	r3, #2
 4084 001a 0AD0     		beq	.L396
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4085              		.loc 1 4275 0
 4086 001c 1C4B     		ldr	r3, .L402
 4087 001e 1A68     		ldr	r2, [r3]
 4088 0020 D06C     		ldr	r0, [r2, #76]
 4089 0022 20EA0700 		bic	r0, r0, r7
 4090 0026 D064     		str	r0, [r2, #76]
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4091              		.loc 1 4278 0
 4092 0028 1B68     		ldr	r3, [r3]
 4093 002a 0122     		movs	r2, #1
 4094 002c 83F85020 		strb	r2, [r3, #80]
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4095              		.loc 1 4280 0
 4096 0030 FEB9     		cbnz	r6, .L401
 4097              	.L396:
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4098              		.loc 1 4301 0
 4099 0032 FFF7FEFF 		bl	vPortExitCritical
 4100              	.LVL336:
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4101              		.loc 1 4303 0
 4102 0036 FFF7FEFF 		bl	vPortEnterCritical
 4103              	.LVL337:
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 168


4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4104              		.loc 1 4307 0
 4105 003a 1DB1     		cbz	r5, .L397
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4106              		.loc 1 4311 0
 4107 003c 144B     		ldr	r3, .L402
 4108 003e 1B68     		ldr	r3, [r3]
 4109 0040 DB6C     		ldr	r3, [r3, #76]
 4110 0042 2B60     		str	r3, [r5]
 4111              	.L397:
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4112              		.loc 1 4318 0
 4113 0044 124B     		ldr	r3, .L402
 4114 0046 1B68     		ldr	r3, [r3]
 4115 0048 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4116 004c DBB2     		uxtb	r3, r3
 4117 004e 012B     		cmp	r3, #1
 4118 0050 1CD0     		beq	.L399
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 4119              		.loc 1 4327 0
 4120 0052 0F4B     		ldr	r3, .L402
 4121 0054 1B68     		ldr	r3, [r3]
 4122 0056 D96C     		ldr	r1, [r3, #76]
 4123 0058 21EA0401 		bic	r1, r1, r4
 4124 005c D964     		str	r1, [r3, #76]
 4125              	.LVL338:
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4126              		.loc 1 4328 0
 4127 005e 0124     		movs	r4, #1
 4128              	.LVL339:
 4129              	.L398:
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4130              		.loc 1 4331 0
 4131 0060 0B4B     		ldr	r3, .L402
 4132 0062 1B68     		ldr	r3, [r3]
 4133 0064 0022     		movs	r2, #0
 4134 0066 83F85020 		strb	r2, [r3, #80]
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4135              		.loc 1 4333 0
 4136 006a FFF7FEFF 		bl	vPortExitCritical
 4137              	.LVL340:
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4138              		.loc 1 4336 0
 4139 006e 2046     		mov	r0, r4
 4140 0070 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4141              	.LVL341:
 4142              	.L401:
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 4143              		.loc 1 4282 0
 4144 0072 1146     		mov	r1, r2
 4145 0074 3046     		mov	r0, r6
 4146 0076 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4147              	.LVL342:
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4148              		.loc 1 4289 0
 4149 007a 4FF08052 		mov	r2, #268435456
 4150 007e 054B     		ldr	r3, .L402+4
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 169


 4151 0080 1A60     		str	r2, [r3]
 4152              		.syntax unified
 4153              	@ 4289 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4154 0082 BFF34F8F 		dsb
 4155              	@ 0 "" 2
 4156              	@ 4289 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4157 0086 BFF36F8F 		isb
 4158              	@ 0 "" 2
 4159              		.thumb
 4160              		.syntax unified
 4161 008a D2E7     		b	.L396
 4162              	.L399:
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4163              		.loc 1 4321 0
 4164 008c 0024     		movs	r4, #0
 4165              	.LVL343:
 4166 008e E7E7     		b	.L398
 4167              	.L403:
 4168              		.align	2
 4169              	.L402:
 4170 0090 00000000 		.word	.LANCHOR10
 4171 0094 04ED00E0 		.word	-536810236
 4172              		.cfi_endproc
 4173              	.LFE46:
 4175              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4176              		.align	1
 4177              		.global	xTaskGenericNotify
 4178              		.syntax unified
 4179              		.thumb
 4180              		.thumb_func
 4181              		.fpu fpv4-sp-d16
 4183              	xTaskGenericNotify:
 4184              	.LFB47:
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4185              		.loc 1 4344 0
 4186              		.cfi_startproc
 4187              		@ args = 0, pretend = 0, frame = 0
 4188              		@ frame_needed = 0, uses_anonymous_args = 0
 4189              	.LVL344:
 4190 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4191              	.LCFI43:
 4192              		.cfi_def_cfa_offset 24
 4193              		.cfi_offset 3, -24
 4194              		.cfi_offset 4, -20
 4195              		.cfi_offset 5, -16
 4196              		.cfi_offset 6, -12
 4197              		.cfi_offset 7, -8
 4198              		.cfi_offset 14, -4
 4199              	.LVL345:
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4200              		.loc 1 4349 0
 4201 0002 A8B1     		cbz	r0, .L420
 4202 0004 0446     		mov	r4, r0
 4203 0006 1F46     		mov	r7, r3
 4204 0008 1546     		mov	r5, r2
 4205 000a 0E46     		mov	r6, r1
 4206              	.LVL346:
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 170


4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4207              		.loc 1 4352 0
 4208 000c FFF7FEFF 		bl	vPortEnterCritical
 4209              	.LVL347:
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4210              		.loc 1 4354 0
 4211 0010 0FB1     		cbz	r7, .L407
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4212              		.loc 1 4356 0
 4213 0012 E36C     		ldr	r3, [r4, #76]
 4214 0014 3B60     		str	r3, [r7]
 4215              	.L407:
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4216              		.loc 1 4359 0
 4217 0016 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4218 001a DBB2     		uxtb	r3, r3
 4219              	.LVL348:
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4220              		.loc 1 4361 0
 4221 001c 0222     		movs	r2, #2
 4222 001e 84F85020 		strb	r2, [r4, #80]
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4223              		.loc 1 4363 0
 4224 0022 6A1E     		subs	r2, r5, #1
 4225 0024 032A     		cmp	r2, #3
 4226 0026 3DD8     		bhi	.L417
 4227 0028 DFE802F0 		tbb	[pc, r2]
 4228              	.L410:
 4229 002c 0B       		.byte	(.L409-.L410)/2
 4230 002d 2F       		.byte	(.L411-.L410)/2
 4231 002e 34       		.byte	(.L412-.L410)/2
 4232 002f 37       		.byte	(.L413-.L410)/2
 4233              	.LVL349:
 4234              		.p2align 1
 4235              	.L420:
 4236              	.LBB169:
 4237              	.LBB170:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4238              		.loc 2 237 0
 4239              		.syntax unified
 4240              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4241 0030 4FF05003 			mov r3, #80												
 4242 0034 83F31188 		msr basepri, r3											
 4243 0038 BFF36F8F 		isb														
 4244 003c BFF34F8F 		dsb														
 4245              	
 4246              	@ 0 "" 2
 4247              	.LVL350:
 4248              		.thumb
 4249              		.syntax unified
 4250              	.L406:
 4251 0040 FEE7     		b	.L406
 4252              	.LVL351:
 4253              	.L409:
 4254              	.LBE170:
 4255              	.LBE169:
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 171


 4256              		.loc 1 4366 0
 4257 0042 E26C     		ldr	r2, [r4, #76]
 4258 0044 1643     		orrs	r6, r6, r2
 4259              	.LVL352:
 4260 0046 E664     		str	r6, [r4, #76]
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4261              		.loc 1 4346 0
 4262 0048 0125     		movs	r5, #1
 4263              	.L408:
 4264              	.LVL353:
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4265              		.loc 1 4399 0
 4266 004a 012B     		cmp	r3, #1
 4267 004c 3CD1     		bne	.L414
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4268              		.loc 1 4401 0
 4269 004e 261D     		adds	r6, r4, #4
 4270 0050 3046     		mov	r0, r6
 4271 0052 FFF7FEFF 		bl	uxListRemove
 4272              	.LVL354:
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4273              		.loc 1 4402 0
 4274 0056 E36A     		ldr	r3, [r4, #44]
 4275 0058 0122     		movs	r2, #1
 4276 005a 9A40     		lsls	r2, r2, r3
 4277 005c 1C49     		ldr	r1, .L421
 4278 005e 0868     		ldr	r0, [r1]
 4279 0060 0243     		orrs	r2, r2, r0
 4280 0062 0A60     		str	r2, [r1]
 4281 0064 03EB8303 		add	r3, r3, r3, lsl #2
 4282 0068 9A00     		lsls	r2, r3, #2
 4283 006a 3146     		mov	r1, r6
 4284 006c 1948     		ldr	r0, .L421+4
 4285 006e 1044     		add	r0, r0, r2
 4286 0070 FFF7FEFF 		bl	vListInsertEnd
 4287              	.LVL355:
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4288              		.loc 1 4405 0
 4289 0074 A36A     		ldr	r3, [r4, #40]
 4290 0076 CBB1     		cbz	r3, .L415
 4291              	.LBB171:
 4292              	.LBB172:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4293              		.loc 2 237 0
 4294              		.syntax unified
 4295              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4296 0078 4FF05003 			mov r3, #80												
 4297 007c 83F31188 		msr basepri, r3											
 4298 0080 BFF36F8F 		isb														
 4299 0084 BFF34F8F 		dsb														
 4300              	
 4301              	@ 0 "" 2
 4302              	.LVL356:
 4303              		.thumb
 4304              		.syntax unified
 4305              	.L416:
 4306 0088 FEE7     		b	.L416
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 172


 4307              	.LVL357:
 4308              	.L411:
 4309              	.LBE172:
 4310              	.LBE171:
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4311              		.loc 1 4370 0
 4312 008a E26C     		ldr	r2, [r4, #76]
 4313 008c 0132     		adds	r2, r2, #1
 4314 008e E264     		str	r2, [r4, #76]
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4315              		.loc 1 4346 0
 4316 0090 0125     		movs	r5, #1
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4317              		.loc 1 4371 0
 4318 0092 DAE7     		b	.L408
 4319              	.L412:
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4320              		.loc 1 4374 0
 4321 0094 E664     		str	r6, [r4, #76]
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4322              		.loc 1 4346 0
 4323 0096 0125     		movs	r5, #1
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4324              		.loc 1 4375 0
 4325 0098 D7E7     		b	.L408
 4326              	.L413:
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4327              		.loc 1 4378 0
 4328 009a 022B     		cmp	r3, #2
 4329 009c 04D0     		beq	.L418
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4330              		.loc 1 4380 0
 4331 009e E664     		str	r6, [r4, #76]
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4332              		.loc 1 4346 0
 4333 00a0 0125     		movs	r5, #1
 4334 00a2 D2E7     		b	.L408
 4335              	.L417:
 4336 00a4 0125     		movs	r5, #1
 4337 00a6 D0E7     		b	.L408
 4338              	.L418:
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4339              		.loc 1 4385 0
 4340 00a8 0025     		movs	r5, #0
 4341 00aa CEE7     		b	.L408
 4342              	.LVL358:
 4343              	.L415:
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4344              		.loc 1 4423 0
 4345 00ac E26A     		ldr	r2, [r4, #44]
 4346 00ae 0A4B     		ldr	r3, .L421+8
 4347 00b0 1B68     		ldr	r3, [r3]
 4348 00b2 DB6A     		ldr	r3, [r3, #44]
 4349 00b4 9A42     		cmp	r2, r3
 4350 00b6 07D9     		bls	.L414
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4351              		.loc 1 4427 0
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 173


 4352 00b8 4FF08052 		mov	r2, #268435456
 4353 00bc 074B     		ldr	r3, .L421+12
 4354 00be 1A60     		str	r2, [r3]
 4355              		.syntax unified
 4356              	@ 4427 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4357 00c0 BFF34F8F 		dsb
 4358              	@ 0 "" 2
 4359              	@ 4427 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4360 00c4 BFF36F8F 		isb
 4361              	@ 0 "" 2
 4362              		.thumb
 4363              		.syntax unified
 4364              	.L414:
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4365              		.loc 1 4439 0
 4366 00c8 FFF7FEFF 		bl	vPortExitCritical
 4367              	.LVL359:
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4368              		.loc 1 4442 0
 4369 00cc 2846     		mov	r0, r5
 4370 00ce F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4371              	.LVL360:
 4372              	.L422:
 4373              		.align	2
 4374              	.L421:
 4375 00d0 00000000 		.word	.LANCHOR13
 4376 00d4 00000000 		.word	.LANCHOR4
 4377 00d8 00000000 		.word	.LANCHOR10
 4378 00dc 04ED00E0 		.word	-536810236
 4379              		.cfi_endproc
 4380              	.LFE47:
 4382              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4383              		.align	1
 4384              		.global	xTaskGenericNotifyFromISR
 4385              		.syntax unified
 4386              		.thumb
 4387              		.thumb_func
 4388              		.fpu fpv4-sp-d16
 4390              	xTaskGenericNotifyFromISR:
 4391              	.LFB48:
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4392              		.loc 1 4450 0
 4393              		.cfi_startproc
 4394              		@ args = 4, pretend = 0, frame = 0
 4395              		@ frame_needed = 0, uses_anonymous_args = 0
 4396              	.LVL361:
 4397 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 4398              	.LCFI44:
 4399              		.cfi_def_cfa_offset 32
 4400              		.cfi_offset 3, -32
 4401              		.cfi_offset 4, -28
 4402              		.cfi_offset 5, -24
 4403              		.cfi_offset 6, -20
 4404              		.cfi_offset 7, -16
 4405              		.cfi_offset 8, -12
 4406              		.cfi_offset 9, -8
 4407              		.cfi_offset 14, -4
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 174


 4408 0004 089E     		ldr	r6, [sp, #32]
 4409              	.LVL362:
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4410              		.loc 1 4456 0
 4411 0006 10B3     		cbz	r0, .L442
 4412 0008 0446     		mov	r4, r0
 4413 000a 9946     		mov	r9, r3
 4414 000c 1546     		mov	r5, r2
 4415 000e 0F46     		mov	r7, r1
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4416              		.loc 1 4474 0
 4417 0010 FFF7FEFF 		bl	vPortValidateInterruptPriority
 4418              	.LVL363:
 4419              	.LBB173:
 4420              	.LBB174:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4421              		.loc 2 253 0
 4422              		.syntax unified
 4423              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4424 0014 EFF31188 			mrs r8, basepri											
 4425 0018 4FF05003 		mov r3, #80												
 4426 001c 83F31188 		msr basepri, r3											
 4427 0020 BFF36F8F 		isb														
 4428 0024 BFF34F8F 		dsb														
 4429              	
 4430              	@ 0 "" 2
 4431              		.thumb
 4432              		.syntax unified
 4433              	.LBE174:
 4434              	.LBE173:
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4435              		.loc 1 4480 0
 4436 0028 B9F1000F 		cmp	r9, #0
 4437 002c 02D0     		beq	.L426
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4438              		.loc 1 4482 0
 4439 002e E36C     		ldr	r3, [r4, #76]
 4440 0030 C9F80030 		str	r3, [r9]
 4441              	.L426:
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4442              		.loc 1 4485 0
 4443 0034 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4444 0038 DBB2     		uxtb	r3, r3
 4445              	.LVL364:
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4446              		.loc 1 4486 0
 4447 003a 0222     		movs	r2, #2
 4448 003c 84F85020 		strb	r2, [r4, #80]
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4449              		.loc 1 4488 0
 4450 0040 6A1E     		subs	r2, r5, #1
 4451 0042 032A     		cmp	r2, #3
 4452 0044 2AD8     		bhi	.L439
 4453 0046 DFE802F0 		tbb	[pc, r2]
 4454              	.L429:
 4455 004a 0B       		.byte	(.L428-.L429)/2
 4456 004b 1C       		.byte	(.L430-.L429)/2
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 175


 4457 004c 21       		.byte	(.L431-.L429)/2
 4458 004d 24       		.byte	(.L432-.L429)/2
 4459              	.LVL365:
 4460              		.p2align 1
 4461              	.L442:
 4462              	.LBB175:
 4463              	.LBB176:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4464              		.loc 2 237 0
 4465              		.syntax unified
 4466              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4467 004e 4FF05003 			mov r3, #80												
 4468 0052 83F31188 		msr basepri, r3											
 4469 0056 BFF36F8F 		isb														
 4470 005a BFF34F8F 		dsb														
 4471              	
 4472              	@ 0 "" 2
 4473              	.LVL366:
 4474              		.thumb
 4475              		.syntax unified
 4476              	.L425:
 4477 005e FEE7     		b	.L425
 4478              	.LVL367:
 4479              	.L428:
 4480              	.LBE176:
 4481              	.LBE175:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4482              		.loc 1 4491 0
 4483 0060 E26C     		ldr	r2, [r4, #76]
 4484 0062 1743     		orrs	r7, r7, r2
 4485              	.LVL368:
 4486 0064 E764     		str	r7, [r4, #76]
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4487              		.loc 1 4453 0
 4488 0066 0125     		movs	r5, #1
 4489              	.L427:
 4490              	.LVL369:
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4491              		.loc 1 4524 0
 4492 0068 012B     		cmp	r3, #1
 4493 006a 3AD1     		bne	.L433
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4494              		.loc 1 4527 0
 4495 006c A36A     		ldr	r3, [r4, #40]
 4496              	.LVL370:
 4497 006e CBB1     		cbz	r3, .L434
 4498              	.LBB177:
 4499              	.LBB178:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4500              		.loc 2 237 0
 4501              		.syntax unified
 4502              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4503 0070 4FF05003 			mov r3, #80												
 4504 0074 83F31188 		msr basepri, r3											
 4505 0078 BFF36F8F 		isb														
 4506 007c BFF34F8F 		dsb														
 4507              	
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 176


 4508              	@ 0 "" 2
 4509              	.LVL371:
 4510              		.thumb
 4511              		.syntax unified
 4512              	.L435:
 4513 0080 FEE7     		b	.L435
 4514              	.LVL372:
 4515              	.L430:
 4516              	.LBE178:
 4517              	.LBE177:
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4518              		.loc 1 4495 0
 4519 0082 E26C     		ldr	r2, [r4, #76]
 4520 0084 0132     		adds	r2, r2, #1
 4521 0086 E264     		str	r2, [r4, #76]
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4522              		.loc 1 4453 0
 4523 0088 0125     		movs	r5, #1
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4524              		.loc 1 4496 0
 4525 008a EDE7     		b	.L427
 4526              	.L431:
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4527              		.loc 1 4499 0
 4528 008c E764     		str	r7, [r4, #76]
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4529              		.loc 1 4453 0
 4530 008e 0125     		movs	r5, #1
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4531              		.loc 1 4500 0
 4532 0090 EAE7     		b	.L427
 4533              	.L432:
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4534              		.loc 1 4503 0
 4535 0092 022B     		cmp	r3, #2
 4536 0094 04D0     		beq	.L440
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4537              		.loc 1 4505 0
 4538 0096 E764     		str	r7, [r4, #76]
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4539              		.loc 1 4453 0
 4540 0098 0125     		movs	r5, #1
 4541 009a E5E7     		b	.L427
 4542              	.L439:
 4543 009c 0125     		movs	r5, #1
 4544 009e E3E7     		b	.L427
 4545              	.L440:
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4546              		.loc 1 4510 0
 4547 00a0 0025     		movs	r5, #0
 4548 00a2 E1E7     		b	.L427
 4549              	.LVL373:
 4550              	.L434:
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4551              		.loc 1 4529 0
 4552 00a4 164B     		ldr	r3, .L443
 4553 00a6 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 177


 4554 00a8 03BB     		cbnz	r3, .L436
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4555              		.loc 1 4531 0
 4556 00aa 271D     		adds	r7, r4, #4
 4557 00ac 3846     		mov	r0, r7
 4558 00ae FFF7FEFF 		bl	uxListRemove
 4559              	.LVL374:
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4560              		.loc 1 4532 0
 4561 00b2 E36A     		ldr	r3, [r4, #44]
 4562 00b4 0122     		movs	r2, #1
 4563 00b6 9A40     		lsls	r2, r2, r3
 4564 00b8 1249     		ldr	r1, .L443+4
 4565 00ba 0868     		ldr	r0, [r1]
 4566 00bc 0243     		orrs	r2, r2, r0
 4567 00be 0A60     		str	r2, [r1]
 4568 00c0 03EB8303 		add	r3, r3, r3, lsl #2
 4569 00c4 9A00     		lsls	r2, r3, #2
 4570 00c6 3946     		mov	r1, r7
 4571 00c8 0F48     		ldr	r0, .L443+8
 4572 00ca 1044     		add	r0, r0, r2
 4573 00cc FFF7FEFF 		bl	vListInsertEnd
 4574              	.LVL375:
 4575              	.L437:
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4576              		.loc 1 4541 0
 4577 00d0 E26A     		ldr	r2, [r4, #44]
 4578 00d2 0E4B     		ldr	r3, .L443+12
 4579 00d4 1B68     		ldr	r3, [r3]
 4580 00d6 DB6A     		ldr	r3, [r3, #44]
 4581 00d8 9A42     		cmp	r2, r3
 4582 00da 02D9     		bls	.L433
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4583              		.loc 1 4545 0
 4584 00dc 66B1     		cbz	r6, .L438
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4585              		.loc 1 4547 0
 4586 00de 0123     		movs	r3, #1
 4587 00e0 3360     		str	r3, [r6]
 4588              	.L433:
 4589              	.LVL376:
 4590              	.LBB179:
 4591              	.LBB180:
 4592              		.loc 2 271 0
 4593              		.syntax unified
 4594              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4595 00e2 88F31188 			msr basepri, r8	
 4596              	@ 0 "" 2
 4597              	.LVL377:
 4598              		.thumb
 4599              		.syntax unified
 4600              	.LBE180:
 4601              	.LBE179:
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4602              		.loc 1 4566 0
 4603 00e6 2846     		mov	r0, r5
 4604 00e8 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 178


 4605              	.LVL378:
 4606              	.L436:
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4607              		.loc 1 4538 0
 4608 00ec 04F11801 		add	r1, r4, #24
 4609 00f0 0748     		ldr	r0, .L443+16
 4610 00f2 FFF7FEFF 		bl	vListInsertEnd
 4611              	.LVL379:
 4612 00f6 EBE7     		b	.L437
 4613              	.L438:
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4614              		.loc 1 4554 0
 4615 00f8 0122     		movs	r2, #1
 4616 00fa 064B     		ldr	r3, .L443+20
 4617 00fc 1A60     		str	r2, [r3]
 4618 00fe F0E7     		b	.L433
 4619              	.L444:
 4620              		.align	2
 4621              	.L443:
 4622 0100 00000000 		.word	.LANCHOR16
 4623 0104 00000000 		.word	.LANCHOR13
 4624 0108 00000000 		.word	.LANCHOR4
 4625 010c 00000000 		.word	.LANCHOR10
 4626 0110 00000000 		.word	.LANCHOR1
 4627 0114 00000000 		.word	.LANCHOR20
 4628              		.cfi_endproc
 4629              	.LFE48:
 4631              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 4632              		.align	1
 4633              		.global	vTaskNotifyGiveFromISR
 4634              		.syntax unified
 4635              		.thumb
 4636              		.thumb_func
 4637              		.fpu fpv4-sp-d16
 4639              	vTaskNotifyGiveFromISR:
 4640              	.LFB49:
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4641              		.loc 1 4574 0
 4642              		.cfi_startproc
 4643              		@ args = 0, pretend = 0, frame = 0
 4644              		@ frame_needed = 0, uses_anonymous_args = 0
 4645              	.LVL380:
 4646 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4647              	.LCFI45:
 4648              		.cfi_def_cfa_offset 24
 4649              		.cfi_offset 3, -24
 4650              		.cfi_offset 4, -20
 4651              		.cfi_offset 5, -16
 4652              		.cfi_offset 6, -12
 4653              		.cfi_offset 7, -8
 4654              		.cfi_offset 14, -4
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4655              		.loc 1 4579 0
 4656 0002 18B3     		cbz	r0, .L455
 4657 0004 0446     		mov	r4, r0
 4658 0006 0D46     		mov	r5, r1
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 179


 4659              		.loc 1 4597 0
 4660 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 4661              	.LVL381:
 4662              	.LBB181:
 4663              	.LBB182:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4664              		.loc 2 253 0
 4665              		.syntax unified
 4666              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4667 000c EFF31187 			mrs r7, basepri											
 4668 0010 4FF05003 		mov r3, #80												
 4669 0014 83F31188 		msr basepri, r3											
 4670 0018 BFF36F8F 		isb														
 4671 001c BFF34F8F 		dsb														
 4672              	
 4673              	@ 0 "" 2
 4674              		.thumb
 4675              		.syntax unified
 4676              	.LBE182:
 4677              	.LBE181:
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4678              		.loc 1 4603 0
 4679 0020 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4680 0024 DBB2     		uxtb	r3, r3
 4681              	.LVL382:
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4682              		.loc 1 4604 0
 4683 0026 0222     		movs	r2, #2
 4684 0028 84F85020 		strb	r2, [r4, #80]
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4685              		.loc 1 4608 0
 4686 002c E26C     		ldr	r2, [r4, #76]
 4687 002e 0132     		adds	r2, r2, #1
 4688 0030 E264     		str	r2, [r4, #76]
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4689              		.loc 1 4614 0
 4690 0032 012B     		cmp	r3, #1
 4691 0034 32D1     		bne	.L448
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4692              		.loc 1 4617 0
 4693 0036 A36A     		ldr	r3, [r4, #40]
 4694              	.LVL383:
 4695 0038 8BB1     		cbz	r3, .L449
 4696              	.LBB183:
 4697              	.LBB184:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4698              		.loc 2 237 0
 4699              		.syntax unified
 4700              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4701 003a 4FF05003 			mov r3, #80												
 4702 003e 83F31188 		msr basepri, r3											
 4703 0042 BFF36F8F 		isb														
 4704 0046 BFF34F8F 		dsb														
 4705              	
 4706              	@ 0 "" 2
 4707              	.LVL384:
 4708              		.thumb
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 180


 4709              		.syntax unified
 4710              	.L450:
 4711 004a FEE7     		b	.L450
 4712              	.LVL385:
 4713              	.L455:
 4714              	.LBE184:
 4715              	.LBE183:
 4716              	.LBB185:
 4717              	.LBB186:
 4718              		.syntax unified
 4719              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4720 004c 4FF05003 			mov r3, #80												
 4721 0050 83F31188 		msr basepri, r3											
 4722 0054 BFF36F8F 		isb														
 4723 0058 BFF34F8F 		dsb														
 4724              	
 4725              	@ 0 "" 2
 4726              	.LVL386:
 4727              		.thumb
 4728              		.syntax unified
 4729              	.L447:
 4730 005c FEE7     		b	.L447
 4731              	.LVL387:
 4732              	.L449:
 4733              	.LBE186:
 4734              	.LBE185:
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4735              		.loc 1 4619 0
 4736 005e 164B     		ldr	r3, .L456
 4737 0060 1B68     		ldr	r3, [r3]
 4738 0062 F3B9     		cbnz	r3, .L451
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4739              		.loc 1 4621 0
 4740 0064 261D     		adds	r6, r4, #4
 4741 0066 3046     		mov	r0, r6
 4742 0068 FFF7FEFF 		bl	uxListRemove
 4743              	.LVL388:
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4744              		.loc 1 4622 0
 4745 006c E36A     		ldr	r3, [r4, #44]
 4746 006e 0122     		movs	r2, #1
 4747 0070 9A40     		lsls	r2, r2, r3
 4748 0072 1249     		ldr	r1, .L456+4
 4749 0074 0868     		ldr	r0, [r1]
 4750 0076 0243     		orrs	r2, r2, r0
 4751 0078 0A60     		str	r2, [r1]
 4752 007a 03EB8303 		add	r3, r3, r3, lsl #2
 4753 007e 9A00     		lsls	r2, r3, #2
 4754 0080 3146     		mov	r1, r6
 4755 0082 0F48     		ldr	r0, .L456+8
 4756 0084 1044     		add	r0, r0, r2
 4757 0086 FFF7FEFF 		bl	vListInsertEnd
 4758              	.LVL389:
 4759              	.L452:
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4760              		.loc 1 4631 0
 4761 008a E26A     		ldr	r2, [r4, #44]
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 181


 4762 008c 0D4B     		ldr	r3, .L456+12
 4763 008e 1B68     		ldr	r3, [r3]
 4764 0090 DB6A     		ldr	r3, [r3, #44]
 4765 0092 9A42     		cmp	r2, r3
 4766 0094 02D9     		bls	.L448
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4767              		.loc 1 4635 0
 4768 0096 55B1     		cbz	r5, .L453
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4769              		.loc 1 4637 0
 4770 0098 0123     		movs	r3, #1
 4771 009a 2B60     		str	r3, [r5]
 4772              	.L448:
 4773              	.LVL390:
 4774              	.LBB187:
 4775              	.LBB188:
 4776              		.loc 2 271 0
 4777              		.syntax unified
 4778              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4779 009c 87F31188 			msr basepri, r7	
 4780              	@ 0 "" 2
 4781              	.LVL391:
 4782              		.thumb
 4783              		.syntax unified
 4784 00a0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4785              	.LVL392:
 4786              	.L451:
 4787              	.LBE188:
 4788              	.LBE187:
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4789              		.loc 1 4628 0
 4790 00a2 04F11801 		add	r1, r4, #24
 4791 00a6 0848     		ldr	r0, .L456+16
 4792 00a8 FFF7FEFF 		bl	vListInsertEnd
 4793              	.LVL393:
 4794 00ac EDE7     		b	.L452
 4795              	.L453:
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4796              		.loc 1 4644 0
 4797 00ae 0122     		movs	r2, #1
 4798 00b0 064B     		ldr	r3, .L456+20
 4799 00b2 1A60     		str	r2, [r3]
 4800 00b4 F2E7     		b	.L448
 4801              	.L457:
 4802 00b6 00BF     		.align	2
 4803              	.L456:
 4804 00b8 00000000 		.word	.LANCHOR16
 4805 00bc 00000000 		.word	.LANCHOR13
 4806 00c0 00000000 		.word	.LANCHOR4
 4807 00c4 00000000 		.word	.LANCHOR10
 4808 00c8 00000000 		.word	.LANCHOR1
 4809 00cc 00000000 		.word	.LANCHOR20
 4810              		.cfi_endproc
 4811              	.LFE49:
 4813              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 4814              		.align	1
 4815              		.global	xTaskNotifyStateClear
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 182


 4816              		.syntax unified
 4817              		.thumb
 4818              		.thumb_func
 4819              		.fpu fpv4-sp-d16
 4821              	xTaskNotifyStateClear:
 4822              	.LFB50:
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4823              		.loc 1 4663 0
 4824              		.cfi_startproc
 4825              		@ args = 0, pretend = 0, frame = 0
 4826              		@ frame_needed = 0, uses_anonymous_args = 0
 4827              	.LVL394:
 4828 0000 10B5     		push	{r4, lr}
 4829              	.LCFI46:
 4830              		.cfi_def_cfa_offset 8
 4831              		.cfi_offset 4, -8
 4832              		.cfi_offset 14, -4
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4833              		.loc 1 4669 0
 4834 0002 0446     		mov	r4, r0
 4835 0004 58B1     		cbz	r0, .L464
 4836              	.L459:
 4837              	.LVL395:
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4838              		.loc 1 4671 0 discriminator 4
 4839 0006 FFF7FEFF 		bl	vPortEnterCritical
 4840              	.LVL396:
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4841              		.loc 1 4673 0 discriminator 4
 4842 000a 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4843 000e DBB2     		uxtb	r3, r3
 4844 0010 022B     		cmp	r3, #2
 4845 0012 07D0     		beq	.L465
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4846              		.loc 1 4680 0
 4847 0014 0024     		movs	r4, #0
 4848              	.LVL397:
 4849              	.L460:
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4850              		.loc 1 4683 0
 4851 0016 FFF7FEFF 		bl	vPortExitCritical
 4852              	.LVL398:
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4853              		.loc 1 4686 0
 4854 001a 2046     		mov	r0, r4
 4855 001c 10BD     		pop	{r4, pc}
 4856              	.LVL399:
 4857              	.L464:
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4858              		.loc 1 4669 0 discriminator 1
 4859 001e 044B     		ldr	r3, .L466
 4860 0020 1C68     		ldr	r4, [r3]
 4861 0022 F0E7     		b	.L459
 4862              	.LVL400:
 4863              	.L465:
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 4864              		.loc 1 4675 0
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 183


 4865 0024 0023     		movs	r3, #0
 4866 0026 84F85030 		strb	r3, [r4, #80]
 4867              	.LVL401:
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4868              		.loc 1 4676 0
 4869 002a 0124     		movs	r4, #1
 4870              	.LVL402:
 4871 002c F3E7     		b	.L460
 4872              	.L467:
 4873 002e 00BF     		.align	2
 4874              	.L466:
 4875 0030 00000000 		.word	.LANCHOR10
 4876              		.cfi_endproc
 4877              	.LFE50:
 4879              		.global	pxCurrentTCB
 4880              		.section	.bss.pxCurrentTCB,"aw",%nobits
 4881              		.align	2
 4882              		.set	.LANCHOR10,. + 0
 4885              	pxCurrentTCB:
 4886 0000 00000000 		.space	4
 4887              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 4888              		.align	2
 4889              		.set	.LANCHOR2,. + 0
 4892              	pxDelayedTaskList:
 4893 0000 00000000 		.space	4
 4894              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 4895              		.align	2
 4896              		.set	.LANCHOR8,. + 0
 4899              	pxOverflowDelayedTaskList:
 4900 0000 00000000 		.space	4
 4901              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 4902              		.align	2
 4903              		.set	.LANCHOR4,. + 0
 4906              	pxReadyTasksLists:
 4907 0000 00000000 		.space	140
 4907      00000000 
 4907      00000000 
 4907      00000000 
 4907      00000000 
 4908              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 4909              		.align	2
 4910              		.set	.LANCHOR9,. + 0
 4913              	uxCurrentNumberOfTasks:
 4914 0000 00000000 		.space	4
 4915              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 4916              		.align	2
 4917              		.set	.LANCHOR15,. + 0
 4920              	uxDeletedTasksWaitingCleanUp:
 4921 0000 00000000 		.space	4
 4922              		.section	.bss.uxPendedTicks,"aw",%nobits
 4923              		.align	2
 4924              		.set	.LANCHOR19,. + 0
 4927              	uxPendedTicks:
 4928 0000 00000000 		.space	4
 4929              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 4930              		.align	2
 4931              		.set	.LANCHOR16,. + 0
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 184


 4934              	uxSchedulerSuspended:
 4935 0000 00000000 		.space	4
 4936              		.section	.bss.uxTaskNumber,"aw",%nobits
 4937              		.align	2
 4938              		.set	.LANCHOR12,. + 0
 4941              	uxTaskNumber:
 4942 0000 00000000 		.space	4
 4943              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 4944              		.align	2
 4945              		.set	.LANCHOR13,. + 0
 4948              	uxTopReadyPriority:
 4949 0000 00000000 		.space	4
 4950              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 4951              		.align	2
 4952              		.set	.LANCHOR5,. + 0
 4955              	xDelayedTaskList1:
 4956 0000 00000000 		.space	20
 4956      00000000 
 4956      00000000 
 4956      00000000 
 4956      00000000 
 4957              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 4958              		.align	2
 4959              		.set	.LANCHOR6,. + 0
 4962              	xDelayedTaskList2:
 4963 0000 00000000 		.space	20
 4963      00000000 
 4963      00000000 
 4963      00000000 
 4963      00000000 
 4964              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 4965              		.align	2
 4966              		.set	.LANCHOR17,. + 0
 4969              	xIdleTaskHandle:
 4970 0000 00000000 		.space	4
 4971              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 4972              		.align	2
 4973              		.set	.LANCHOR3,. + 0
 4976              	xNextTaskUnblockTime:
 4977 0000 00000000 		.space	4
 4978              		.section	.bss.xNumOfOverflows,"aw",%nobits
 4979              		.align	2
 4980              		.set	.LANCHOR18,. + 0
 4983              	xNumOfOverflows:
 4984 0000 00000000 		.space	4
 4985              		.section	.bss.xPendingReadyList,"aw",%nobits
 4986              		.align	2
 4987              		.set	.LANCHOR1,. + 0
 4990              	xPendingReadyList:
 4991 0000 00000000 		.space	20
 4991      00000000 
 4991      00000000 
 4991      00000000 
 4991      00000000 
 4992              		.section	.bss.xSchedulerRunning,"aw",%nobits
 4993              		.align	2
 4994              		.set	.LANCHOR11,. + 0
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 185


 4997              	xSchedulerRunning:
 4998 0000 00000000 		.space	4
 4999              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 5000              		.align	2
 5001              		.set	.LANCHOR0,. + 0
 5004              	xSuspendedTaskList:
 5005 0000 00000000 		.space	20
 5005      00000000 
 5005      00000000 
 5005      00000000 
 5005      00000000 
 5006              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 5007              		.align	2
 5008              		.set	.LANCHOR7,. + 0
 5011              	xTasksWaitingTermination:
 5012 0000 00000000 		.space	20
 5012      00000000 
 5012      00000000 
 5012      00000000 
 5012      00000000 
 5013              		.section	.bss.xTickCount,"aw",%nobits
 5014              		.align	2
 5015              		.set	.LANCHOR14,. + 0
 5018              	xTickCount:
 5019 0000 00000000 		.space	4
 5020              		.section	.bss.xYieldPending,"aw",%nobits
 5021              		.align	2
 5022              		.set	.LANCHOR20,. + 0
 5025              	xYieldPending:
 5026 0000 00000000 		.space	4
 5027              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 5028              		.align	2
 5029              	.LC0:
 5030 0000 49444C45 		.ascii	"IDLE\000"
 5030      00
 5031              		.text
 5032              	.Letext0:
 5033              		.file 3 "c:\\gcc_toolchain\\6_2017-q1-update\\lib\\gcc\\arm-none-eabi\\6.3.1\\include\\stddef.h"
 5034              		.file 4 "c:\\gcc_toolchain\\6_2017-q1-update\\arm-none-eabi\\include\\machine\\_default_types.h"
 5035              		.file 5 "c:\\gcc_toolchain\\6_2017-q1-update\\arm-none-eabi\\include\\sys\\lock.h"
 5036              		.file 6 "c:\\gcc_toolchain\\6_2017-q1-update\\arm-none-eabi\\include\\sys\\_types.h"
 5037              		.file 7 "c:\\gcc_toolchain\\6_2017-q1-update\\arm-none-eabi\\include\\sys\\reent.h"
 5038              		.file 8 "c:\\gcc_toolchain\\6_2017-q1-update\\arm-none-eabi\\include\\stdlib.h"
 5039              		.file 9 "c:\\gcc_toolchain\\6_2017-q1-update\\arm-none-eabi\\include\\sys\\_stdint.h"
 5040              		.file 10 "Inc/FreeRTOSConfig.h"
 5041              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 5042              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 5043              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 5044              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 186


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:18     .text.prvTaskIsTaskSuspended:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:24     .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:104    .text.prvTaskIsTaskSuspended:00000044 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:110    .text.prvResetNextTaskUnblockTime:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:116    .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:157    .text.prvResetNextTaskUnblockTime:0000002c $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:163    .text.prvDeleteTCB:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:169    .text.prvDeleteTCB:00000000 prvDeleteTCB
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:196    .text.prvInitialiseNewTask:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:202    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:310    .text.prvInitialiseTaskLists:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:316    .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:382    .text.prvInitialiseTaskLists:00000048 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:394    .text.prvAddNewTaskToReadyList:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:400    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:506    .text.prvAddNewTaskToReadyList:0000008c $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:517    .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:523    .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:622    .text.prvAddCurrentTaskToDelayedList:0000007c $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:633    .text.xTaskCreate:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:640    .text.xTaskCreate:00000000 xTaskCreate
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:745    .text.vTaskDelete:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:752    .text.vTaskDelete:00000000 vTaskDelete
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:903    .text.vTaskDelete:000000b8 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:917    .text.uxTaskPriorityGet:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:924    .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:963    .text.uxTaskPriorityGet:0000001c $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:968    .text.uxTaskPriorityGetFromISR:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:975    .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1038   .text.uxTaskPriorityGetFromISR:0000002c $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1043   .text.vTaskPrioritySet:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1050   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1239   .text.vTaskPrioritySet:000000d8 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1247   .text.vTaskResume:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1254   .text.vTaskResume:00000000 vTaskResume
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1357   .text.vTaskResume:00000078 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1365   .text.xTaskResumeFromISR:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1372   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1509   .text.xTaskResumeFromISR:00000094 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1518   .text.vTaskStartScheduler:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1525   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1619   .text.vTaskStartScheduler:00000064 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:2495   .text.prvIdleTask:00000000 prvIdleTask
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1631   .text.vTaskEndScheduler:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1638   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1675   .text.vTaskEndScheduler:00000020 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1680   .text.vTaskSuspendAll:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1687   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1703   .text.vTaskSuspendAll:0000000c $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1708   .text.xTaskGetTickCount:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1715   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1731   .text.xTaskGetTickCount:00000008 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1736   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1743   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1766   .text.xTaskGetTickCountFromISR:0000000c $d
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 187


C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1771   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1778   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1793   .text.uxTaskGetNumberOfTasks:00000008 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1798   .text.pcTaskGetName:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1805   .text.pcTaskGetName:00000000 pcTaskGetName
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1851   .text.pcTaskGetName:00000020 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1858   .text.xTaskIncrementTick:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:1865   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:2074   .text.xTaskIncrementTick:000000f4 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:2089   .text.xTaskResumeAll:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:2096   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:2285   .text.xTaskResumeAll:000000d8 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:2298   .text.vTaskDelay:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:2305   .text.vTaskDelay:00000000 vTaskDelay
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:2382   .text.vTaskDelay:00000048 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:2388   .text.prvCheckTasksWaitingTermination:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:2394   .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:2481   .text.prvCheckTasksWaitingTermination:00000050 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:2489   .text.prvIdleTask:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:2535   .text.prvIdleTask:00000020 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:2541   .text.vTaskSwitchContext:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:2548   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:2676   .text.vTaskSwitchContext:00000088 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:2687   .text.vTaskSuspend:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:2694   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:2850   .text.vTaskSuspend:000000b8 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:2862   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:2869   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:2921   .text.vTaskPlaceOnEventList:0000002c $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:2926   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:2933   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3020   .text.vTaskPlaceOnUnorderedEventList:00000054 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3026   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3033   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3135   .text.xTaskRemoveFromEventList:00000074 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3145   .text.xTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3152   .text.xTaskRemoveFromUnorderedEventList:00000000 xTaskRemoveFromUnorderedEventList
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3265   .text.xTaskRemoveFromUnorderedEventList:00000078 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3274   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3281   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3320   .text.vTaskSetTimeOutState:00000024 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3328   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3335   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3464   .text.xTaskCheckForTimeOut:00000078 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3471   .text.vTaskMissedYield:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3478   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3493   .text.vTaskMissedYield:00000008 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3498   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3505   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3521   .text.xTaskGetCurrentTaskHandle:00000008 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3526   .text.xTaskGetSchedulerState:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3533   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3564   .text.xTaskGetSchedulerState:00000018 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3570   .text.vTaskPriorityInherit:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3577   .text.vTaskPriorityInherit:00000000 vTaskPriorityInherit
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3693   .text.vTaskPriorityInherit:00000098 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3700   .text.xTaskPriorityDisinherit:00000000 $t
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 188


C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3707   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3859   .text.xTaskPriorityDisinherit:000000a8 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3866   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3873   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3896   .text.uxTaskResetEventItemValue:00000014 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3901   .text.pvTaskIncrementMutexHeldCount:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3908   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3934   .text.pvTaskIncrementMutexHeldCount:00000018 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3939   .text.ulTaskNotifyTake:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:3946   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4042   .text.ulTaskNotifyTake:00000070 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4048   .text.xTaskNotifyWait:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4055   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4170   .text.xTaskNotifyWait:00000090 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4176   .text.xTaskGenericNotify:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4183   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4229   .text.xTaskGenericNotify:0000002c $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4234   .text.xTaskGenericNotify:00000030 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4375   .text.xTaskGenericNotify:000000d0 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4383   .text.xTaskGenericNotifyFromISR:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4390   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4455   .text.xTaskGenericNotifyFromISR:0000004a $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4460   .text.xTaskGenericNotifyFromISR:0000004e $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4622   .text.xTaskGenericNotifyFromISR:00000100 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4632   .text.vTaskNotifyGiveFromISR:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4639   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4804   .text.vTaskNotifyGiveFromISR:000000b8 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4814   .text.xTaskNotifyStateClear:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4821   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4875   .text.xTaskNotifyStateClear:00000030 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4885   .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4881   .bss.pxCurrentTCB:00000000 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4888   .bss.pxDelayedTaskList:00000000 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4892   .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4895   .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4899   .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4902   .bss.pxReadyTasksLists:00000000 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4906   .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4909   .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4913   .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4916   .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4920   .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4923   .bss.uxPendedTicks:00000000 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4927   .bss.uxPendedTicks:00000000 uxPendedTicks
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4930   .bss.uxSchedulerSuspended:00000000 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4934   .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4937   .bss.uxTaskNumber:00000000 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4941   .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4944   .bss.uxTopReadyPriority:00000000 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4948   .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4951   .bss.xDelayedTaskList1:00000000 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4955   .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4958   .bss.xDelayedTaskList2:00000000 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4962   .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4965   .bss.xIdleTaskHandle:00000000 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4969   .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4972   .bss.xNextTaskUnblockTime:00000000 $d
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s 			page 189


C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4976   .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4979   .bss.xNumOfOverflows:00000000 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4983   .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4986   .bss.xPendingReadyList:00000000 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4990   .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4993   .bss.xSchedulerRunning:00000000 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:4997   .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:5000   .bss.xSuspendedTaskList:00000000 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:5004   .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:5007   .bss.xTasksWaitingTermination:00000000 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:5011   .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:5014   .bss.xTickCount:00000000 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:5018   .bss.xTickCount:00000000 xTickCount
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:5021   .bss.xYieldPending:00000000 $d
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:5025   .bss.xYieldPending:00000000 xYieldPending
C:\Users\Student\AppData\Local\Temp\ccfRCbWC.s:5028   .rodata.vTaskStartScheduler.str1.4:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vPortFree
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vListInsert
pvPortMalloc
vPortValidateInterruptPriority
xPortStartScheduler
vPortEndScheduler
